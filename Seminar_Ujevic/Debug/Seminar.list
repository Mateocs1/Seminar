
Seminar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a5c  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c18  08004c24  08004c24  00005c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800583c  0800583c  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  0800583c  0800583c  0000683c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005844  08005844  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005844  08005844  00006844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005848  08005848  00006848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800584c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000524  2000000c  08005858  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  08005858  00007530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2db  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201a  00000000  00000000  00014317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00016338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a59  00000000  00000000  00017070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021616  00000000  00000000  00017ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010edc  00000000  00000000  000390df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd264  00000000  00000000  00049fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011721f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038d4  00000000  00000000  00117264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011ab38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004c0c 	.word	0x08004c0c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004c0c 	.word	0x08004c0c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_uldivmod>:
 80009e4:	b953      	cbnz	r3, 80009fc <__aeabi_uldivmod+0x18>
 80009e6:	b94a      	cbnz	r2, 80009fc <__aeabi_uldivmod+0x18>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	bf08      	it	eq
 80009ec:	2800      	cmpeq	r0, #0
 80009ee:	bf1c      	itt	ne
 80009f0:	f04f 31ff 	movne.w	r1, #4294967295
 80009f4:	f04f 30ff 	movne.w	r0, #4294967295
 80009f8:	f000 b96a 	b.w	8000cd0 <__aeabi_idiv0>
 80009fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a04:	f000 f806 	bl	8000a14 <__udivmoddi4>
 8000a08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a10:	b004      	add	sp, #16
 8000a12:	4770      	bx	lr

08000a14 <__udivmoddi4>:
 8000a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a18:	9d08      	ldr	r5, [sp, #32]
 8000a1a:	460c      	mov	r4, r1
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d14e      	bne.n	8000abe <__udivmoddi4+0xaa>
 8000a20:	4694      	mov	ip, r2
 8000a22:	458c      	cmp	ip, r1
 8000a24:	4686      	mov	lr, r0
 8000a26:	fab2 f282 	clz	r2, r2
 8000a2a:	d962      	bls.n	8000af2 <__udivmoddi4+0xde>
 8000a2c:	b14a      	cbz	r2, 8000a42 <__udivmoddi4+0x2e>
 8000a2e:	f1c2 0320 	rsb	r3, r2, #32
 8000a32:	4091      	lsls	r1, r2
 8000a34:	fa20 f303 	lsr.w	r3, r0, r3
 8000a38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3c:	4319      	orrs	r1, r3
 8000a3e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a46:	fa1f f68c 	uxth.w	r6, ip
 8000a4a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a52:	fb07 1114 	mls	r1, r7, r4, r1
 8000a56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5a:	fb04 f106 	mul.w	r1, r4, r6
 8000a5e:	4299      	cmp	r1, r3
 8000a60:	d90a      	bls.n	8000a78 <__udivmoddi4+0x64>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a6a:	f080 8112 	bcs.w	8000c92 <__udivmoddi4+0x27e>
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	f240 810f 	bls.w	8000c92 <__udivmoddi4+0x27e>
 8000a74:	3c02      	subs	r4, #2
 8000a76:	4463      	add	r3, ip
 8000a78:	1a59      	subs	r1, r3, r1
 8000a7a:	fa1f f38e 	uxth.w	r3, lr
 8000a7e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a82:	fb07 1110 	mls	r1, r7, r0, r1
 8000a86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a8a:	fb00 f606 	mul.w	r6, r0, r6
 8000a8e:	429e      	cmp	r6, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x94>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a9a:	f080 80fc 	bcs.w	8000c96 <__udivmoddi4+0x282>
 8000a9e:	429e      	cmp	r6, r3
 8000aa0:	f240 80f9 	bls.w	8000c96 <__udivmoddi4+0x282>
 8000aa4:	4463      	add	r3, ip
 8000aa6:	3802      	subs	r0, #2
 8000aa8:	1b9b      	subs	r3, r3, r6
 8000aaa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000aae:	2100      	movs	r1, #0
 8000ab0:	b11d      	cbz	r5, 8000aba <__udivmoddi4+0xa6>
 8000ab2:	40d3      	lsrs	r3, r2
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	e9c5 3200 	strd	r3, r2, [r5]
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d905      	bls.n	8000ace <__udivmoddi4+0xba>
 8000ac2:	b10d      	cbz	r5, 8000ac8 <__udivmoddi4+0xb4>
 8000ac4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4608      	mov	r0, r1
 8000acc:	e7f5      	b.n	8000aba <__udivmoddi4+0xa6>
 8000ace:	fab3 f183 	clz	r1, r3
 8000ad2:	2900      	cmp	r1, #0
 8000ad4:	d146      	bne.n	8000b64 <__udivmoddi4+0x150>
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	d302      	bcc.n	8000ae0 <__udivmoddi4+0xcc>
 8000ada:	4290      	cmp	r0, r2
 8000adc:	f0c0 80f0 	bcc.w	8000cc0 <__udivmoddi4+0x2ac>
 8000ae0:	1a86      	subs	r6, r0, r2
 8000ae2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	2d00      	cmp	r5, #0
 8000aea:	d0e6      	beq.n	8000aba <__udivmoddi4+0xa6>
 8000aec:	e9c5 6300 	strd	r6, r3, [r5]
 8000af0:	e7e3      	b.n	8000aba <__udivmoddi4+0xa6>
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	f040 8090 	bne.w	8000c18 <__udivmoddi4+0x204>
 8000af8:	eba1 040c 	sub.w	r4, r1, ip
 8000afc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b00:	fa1f f78c 	uxth.w	r7, ip
 8000b04:	2101      	movs	r1, #1
 8000b06:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b0e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b16:	fb07 f006 	mul.w	r0, r7, r6
 8000b1a:	4298      	cmp	r0, r3
 8000b1c:	d908      	bls.n	8000b30 <__udivmoddi4+0x11c>
 8000b1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b22:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x11a>
 8000b28:	4298      	cmp	r0, r3
 8000b2a:	f200 80cd 	bhi.w	8000cc8 <__udivmoddi4+0x2b4>
 8000b2e:	4626      	mov	r6, r4
 8000b30:	1a1c      	subs	r4, r3, r0
 8000b32:	fa1f f38e 	uxth.w	r3, lr
 8000b36:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b3a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b42:	fb00 f707 	mul.w	r7, r0, r7
 8000b46:	429f      	cmp	r7, r3
 8000b48:	d908      	bls.n	8000b5c <__udivmoddi4+0x148>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b52:	d202      	bcs.n	8000b5a <__udivmoddi4+0x146>
 8000b54:	429f      	cmp	r7, r3
 8000b56:	f200 80b0 	bhi.w	8000cba <__udivmoddi4+0x2a6>
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	1bdb      	subs	r3, r3, r7
 8000b5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b62:	e7a5      	b.n	8000ab0 <__udivmoddi4+0x9c>
 8000b64:	f1c1 0620 	rsb	r6, r1, #32
 8000b68:	408b      	lsls	r3, r1
 8000b6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b6e:	431f      	orrs	r7, r3
 8000b70:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b74:	fa04 f301 	lsl.w	r3, r4, r1
 8000b78:	ea43 030c 	orr.w	r3, r3, ip
 8000b7c:	40f4      	lsrs	r4, r6
 8000b7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b82:	0c38      	lsrs	r0, r7, #16
 8000b84:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b88:	fbb4 fef0 	udiv	lr, r4, r0
 8000b8c:	fa1f fc87 	uxth.w	ip, r7
 8000b90:	fb00 441e 	mls	r4, r0, lr, r4
 8000b94:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b98:	fb0e f90c 	mul.w	r9, lr, ip
 8000b9c:	45a1      	cmp	r9, r4
 8000b9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000ba2:	d90a      	bls.n	8000bba <__udivmoddi4+0x1a6>
 8000ba4:	193c      	adds	r4, r7, r4
 8000ba6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000baa:	f080 8084 	bcs.w	8000cb6 <__udivmoddi4+0x2a2>
 8000bae:	45a1      	cmp	r9, r4
 8000bb0:	f240 8081 	bls.w	8000cb6 <__udivmoddi4+0x2a2>
 8000bb4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bb8:	443c      	add	r4, r7
 8000bba:	eba4 0409 	sub.w	r4, r4, r9
 8000bbe:	fa1f f983 	uxth.w	r9, r3
 8000bc2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bc6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bce:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bd2:	45a4      	cmp	ip, r4
 8000bd4:	d907      	bls.n	8000be6 <__udivmoddi4+0x1d2>
 8000bd6:	193c      	adds	r4, r7, r4
 8000bd8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bdc:	d267      	bcs.n	8000cae <__udivmoddi4+0x29a>
 8000bde:	45a4      	cmp	ip, r4
 8000be0:	d965      	bls.n	8000cae <__udivmoddi4+0x29a>
 8000be2:	3b02      	subs	r3, #2
 8000be4:	443c      	add	r4, r7
 8000be6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bea:	fba0 9302 	umull	r9, r3, r0, r2
 8000bee:	eba4 040c 	sub.w	r4, r4, ip
 8000bf2:	429c      	cmp	r4, r3
 8000bf4:	46ce      	mov	lr, r9
 8000bf6:	469c      	mov	ip, r3
 8000bf8:	d351      	bcc.n	8000c9e <__udivmoddi4+0x28a>
 8000bfa:	d04e      	beq.n	8000c9a <__udivmoddi4+0x286>
 8000bfc:	b155      	cbz	r5, 8000c14 <__udivmoddi4+0x200>
 8000bfe:	ebb8 030e 	subs.w	r3, r8, lr
 8000c02:	eb64 040c 	sbc.w	r4, r4, ip
 8000c06:	fa04 f606 	lsl.w	r6, r4, r6
 8000c0a:	40cb      	lsrs	r3, r1
 8000c0c:	431e      	orrs	r6, r3
 8000c0e:	40cc      	lsrs	r4, r1
 8000c10:	e9c5 6400 	strd	r6, r4, [r5]
 8000c14:	2100      	movs	r1, #0
 8000c16:	e750      	b.n	8000aba <__udivmoddi4+0xa6>
 8000c18:	f1c2 0320 	rsb	r3, r2, #32
 8000c1c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c24:	fa24 f303 	lsr.w	r3, r4, r3
 8000c28:	4094      	lsls	r4, r2
 8000c2a:	430c      	orrs	r4, r1
 8000c2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c30:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c34:	fa1f f78c 	uxth.w	r7, ip
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c40:	0c23      	lsrs	r3, r4, #16
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb00 f107 	mul.w	r1, r0, r7
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x24c>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c56:	d22c      	bcs.n	8000cb2 <__udivmoddi4+0x29e>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d92a      	bls.n	8000cb2 <__udivmoddi4+0x29e>
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	4463      	add	r3, ip
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c68:	fb08 3311 	mls	r3, r8, r1, r3
 8000c6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c70:	fb01 f307 	mul.w	r3, r1, r7
 8000c74:	42a3      	cmp	r3, r4
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0x276>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c80:	d213      	bcs.n	8000caa <__udivmoddi4+0x296>
 8000c82:	42a3      	cmp	r3, r4
 8000c84:	d911      	bls.n	8000caa <__udivmoddi4+0x296>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4464      	add	r4, ip
 8000c8a:	1ae4      	subs	r4, r4, r3
 8000c8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c90:	e739      	b.n	8000b06 <__udivmoddi4+0xf2>
 8000c92:	4604      	mov	r4, r0
 8000c94:	e6f0      	b.n	8000a78 <__udivmoddi4+0x64>
 8000c96:	4608      	mov	r0, r1
 8000c98:	e706      	b.n	8000aa8 <__udivmoddi4+0x94>
 8000c9a:	45c8      	cmp	r8, r9
 8000c9c:	d2ae      	bcs.n	8000bfc <__udivmoddi4+0x1e8>
 8000c9e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ca2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ca6:	3801      	subs	r0, #1
 8000ca8:	e7a8      	b.n	8000bfc <__udivmoddi4+0x1e8>
 8000caa:	4631      	mov	r1, r6
 8000cac:	e7ed      	b.n	8000c8a <__udivmoddi4+0x276>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	e799      	b.n	8000be6 <__udivmoddi4+0x1d2>
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	e7d4      	b.n	8000c60 <__udivmoddi4+0x24c>
 8000cb6:	46d6      	mov	lr, sl
 8000cb8:	e77f      	b.n	8000bba <__udivmoddi4+0x1a6>
 8000cba:	4463      	add	r3, ip
 8000cbc:	3802      	subs	r0, #2
 8000cbe:	e74d      	b.n	8000b5c <__udivmoddi4+0x148>
 8000cc0:	4606      	mov	r6, r0
 8000cc2:	4623      	mov	r3, r4
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	e70f      	b.n	8000ae8 <__udivmoddi4+0xd4>
 8000cc8:	3e02      	subs	r6, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	e730      	b.n	8000b30 <__udivmoddi4+0x11c>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_idiv0>:
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	4b26      	ldr	r3, [pc, #152]	@ (8000d88 <MX_GPIO_Init+0xb4>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	4a25      	ldr	r2, [pc, #148]	@ (8000d88 <MX_GPIO_Init+0xb4>)
 8000cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfa:	4b23      	ldr	r3, [pc, #140]	@ (8000d88 <MX_GPIO_Init+0xb4>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d88 <MX_GPIO_Init+0xb4>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8000d88 <MX_GPIO_Init+0xb4>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b1c      	ldr	r3, [pc, #112]	@ (8000d88 <MX_GPIO_Init+0xb4>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <MX_GPIO_Init+0xb4>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a17      	ldr	r2, [pc, #92]	@ (8000d88 <MX_GPIO_Init+0xb4>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <MX_GPIO_Init+0xb4>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8000d44:	4811      	ldr	r0, [pc, #68]	@ (8000d8c <MX_GPIO_Init+0xb8>)
 8000d46:	f001 fa7b 	bl	8002240 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8000d4a:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8000d4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	4619      	mov	r1, r3
 8000d62:	480a      	ldr	r0, [pc, #40]	@ (8000d8c <MX_GPIO_Init+0xb8>)
 8000d64:	f001 f8c0 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d68:	2320      	movs	r3, #32
 8000d6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4805      	ldr	r0, [pc, #20]	@ (8000d90 <MX_GPIO_Init+0xbc>)
 8000d7c:	f001 f8b4 	bl	8001ee8 <HAL_GPIO_Init>

}
 8000d80:	bf00      	nop
 8000d82:	3720      	adds	r7, #32
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	40020400 	.word	0x40020400

08000d94 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d98:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <MX_I2C1_Init+0x50>)
 8000d9a:	4a13      	ldr	r2, [pc, #76]	@ (8000de8 <MX_I2C1_Init+0x54>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <MX_I2C1_Init+0x50>)
 8000da0:	4a12      	ldr	r2, [pc, #72]	@ (8000dec <MX_I2C1_Init+0x58>)
 8000da2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <MX_I2C1_Init+0x50>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <MX_I2C1_Init+0x50>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <MX_I2C1_Init+0x50>)
 8000db2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000db6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <MX_I2C1_Init+0x50>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <MX_I2C1_Init+0x50>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <MX_I2C1_Init+0x50>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <MX_I2C1_Init+0x50>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dd0:	4804      	ldr	r0, [pc, #16]	@ (8000de4 <MX_I2C1_Init+0x50>)
 8000dd2:	f001 fa4f 	bl	8002274 <HAL_I2C_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ddc:	f000 fcdf 	bl	800179e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000028 	.word	0x20000028
 8000de8:	40005400 	.word	0x40005400
 8000dec:	00061a80 	.word	0x00061a80

08000df0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	@ 0x28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a19      	ldr	r2, [pc, #100]	@ (8000e74 <HAL_I2C_MspInit+0x84>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d12c      	bne.n	8000e6c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	4b18      	ldr	r3, [pc, #96]	@ (8000e78 <HAL_I2C_MspInit+0x88>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	4a17      	ldr	r2, [pc, #92]	@ (8000e78 <HAL_I2C_MspInit+0x88>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e22:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <HAL_I2C_MspInit+0x88>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e2e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e34:	2312      	movs	r3, #18
 8000e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e40:	2304      	movs	r3, #4
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480c      	ldr	r0, [pc, #48]	@ (8000e7c <HAL_I2C_MspInit+0x8c>)
 8000e4c:	f001 f84c 	bl	8001ee8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <HAL_I2C_MspInit+0x88>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e58:	4a07      	ldr	r2, [pc, #28]	@ (8000e78 <HAL_I2C_MspInit+0x88>)
 8000e5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e60:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <HAL_I2C_MspInit+0x88>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	3728      	adds	r7, #40	@ 0x28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40005400 	.word	0x40005400
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020400 	.word	0x40020400

08000e80 <mikrosekunda>:
#define WIDTH 130
#define HEIGHT 64
static uint8_t Buffer[WIDTH * HEIGHT / 8];

void mikrosekunda (uint16_t time)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000e8a:	4b09      	ldr	r3, [pc, #36]	@ (8000eb0 <mikrosekunda+0x30>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 8000e92:	bf00      	nop
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <mikrosekunda+0x30>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d3f9      	bcc.n	8000e94 <mikrosekunda+0x14>
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	2000049c 	.word	0x2000049c
 8000eb4:	00000000 	.word	0x00000000

08000eb8 <HAL_TIM_IC_CaptureCallback>:
uint8_t prvi = 0;
uint8_t udaljenost  = 0;


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

	if (prvi==0)
 8000ec0:	4b45      	ldr	r3, [pc, #276]	@ (8000fd8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d11a      	bne.n	8000efe <HAL_TIM_IC_CaptureCallback+0x46>
			{
				vrijednost1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000ec8:	2100      	movs	r1, #0
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f003 f9ca 	bl	8004264 <HAL_TIM_ReadCapturedValue>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4a42      	ldr	r2, [pc, #264]	@ (8000fdc <HAL_TIM_IC_CaptureCallback+0x124>)
 8000ed4:	6013      	str	r3, [r2, #0]
				prvi = 1;
 8000ed6:	4b40      	ldr	r3, [pc, #256]	@ (8000fd8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6a1a      	ldr	r2, [r3, #32]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 020a 	bic.w	r2, r2, #10
 8000eea:	621a      	str	r2, [r3, #32]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6a1a      	ldr	r2, [r3, #32]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f042 0202 	orr.w	r2, r2, #2
 8000efa:	621a      	str	r2, [r3, #32]

				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
				__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}

}
 8000efc:	e063      	b.n	8000fc6 <HAL_TIM_IC_CaptureCallback+0x10e>
			else if (prvi==1){
 8000efe:	4b36      	ldr	r3, [pc, #216]	@ (8000fd8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d15f      	bne.n	8000fc6 <HAL_TIM_IC_CaptureCallback+0x10e>
				vrijednost2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f06:	2100      	movs	r1, #0
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f003 f9ab 	bl	8004264 <HAL_TIM_ReadCapturedValue>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a33      	ldr	r2, [pc, #204]	@ (8000fe0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f12:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	625a      	str	r2, [r3, #36]	@ 0x24
				if (vrijednost2 > vrijednost1){
 8000f1c:	4b30      	ldr	r3, [pc, #192]	@ (8000fe0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b2e      	ldr	r3, [pc, #184]	@ (8000fdc <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d907      	bls.n	8000f38 <HAL_TIM_IC_CaptureCallback+0x80>
					razlika = vrijednost2-vrijednost1;
 8000f28:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000fdc <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	4a2c      	ldr	r2, [pc, #176]	@ (8000fe4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	e00f      	b.n	8000f58 <HAL_TIM_IC_CaptureCallback+0xa0>
				else if (vrijednost1 > vrijednost2){
 8000f38:	4b28      	ldr	r3, [pc, #160]	@ (8000fdc <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b28      	ldr	r3, [pc, #160]	@ (8000fe0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d909      	bls.n	8000f58 <HAL_TIM_IC_CaptureCallback+0xa0>
					razlika = (0xffff - vrijednost1) + vrijednost2;
 8000f44:	4b26      	ldr	r3, [pc, #152]	@ (8000fe0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b24      	ldr	r3, [pc, #144]	@ (8000fdc <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000f52:	33ff      	adds	r3, #255	@ 0xff
 8000f54:	4a23      	ldr	r2, [pc, #140]	@ (8000fe4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f56:	6013      	str	r3, [r2, #0]
				udaljenost = razlika * .034/2;
 8000f58:	4b22      	ldr	r3, [pc, #136]	@ (8000fe4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fa95 	bl	800048c <__aeabi_ui2d>
 8000f62:	a31b      	add	r3, pc, #108	@ (adr r3, 8000fd0 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f68:	f7ff fb0a 	bl	8000580 <__aeabi_dmul>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	f04f 0200 	mov.w	r2, #0
 8000f78:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f7c:	f7ff fc2a 	bl	80007d4 <__aeabi_ddiv>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	f7ff fd0c 	bl	80009a4 <__aeabi_d2uiz>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f92:	701a      	strb	r2, [r3, #0]
				prvi = 0;
 8000f94:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	6a1a      	ldr	r2, [r3, #32]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 020a 	bic.w	r2, r2, #10
 8000fa8:	621a      	str	r2, [r3, #32]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6a12      	ldr	r2, [r2, #32]
 8000fb4:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <HAL_TIM_IC_CaptureCallback+0x134>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <HAL_TIM_IC_CaptureCallback+0x134>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 0202 	bic.w	r2, r2, #2
 8000fc4:	60da      	str	r2, [r3, #12]
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	b020c49c 	.word	0xb020c49c
 8000fd4:	3fa16872 	.word	0x3fa16872
 8000fd8:	20000498 	.word	0x20000498
 8000fdc:	2000048c 	.word	0x2000048c
 8000fe0:	20000490 	.word	0x20000490
 8000fe4:	20000494 	.word	0x20000494
 8000fe8:	20000499 	.word	0x20000499
 8000fec:	2000049c 	.word	0x2000049c

08000ff0 <UZ_Read>:

void UZ_Read (void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ffa:	480b      	ldr	r0, [pc, #44]	@ (8001028 <UZ_Read+0x38>)
 8000ffc:	f001 f920 	bl	8002240 <HAL_GPIO_WritePin>
	mikrosekunda(10);
 8001000:	200a      	movs	r0, #10
 8001002:	f7ff ff3d 	bl	8000e80 <mikrosekunda>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800100c:	4806      	ldr	r0, [pc, #24]	@ (8001028 <UZ_Read+0x38>)
 800100e:	f001 f917 	bl	8002240 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <UZ_Read+0x3c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68da      	ldr	r2, [r3, #12]
 8001018:	4b04      	ldr	r3, [pc, #16]	@ (800102c <UZ_Read+0x3c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f042 0202 	orr.w	r2, r2, #2
 8001020:	60da      	str	r2, [r3, #12]
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40020000 	.word	0x40020000
 800102c:	2000049c 	.word	0x2000049c

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001036:	f000 fdaf 	bl	8001b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103a:	f000 fa0f 	bl	800145c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103e:	f7ff fe49 	bl	8000cd4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001042:	f7ff fea7 	bl	8000d94 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001046:	f000 fc25 	bl	8001894 <MX_TIM1_Init>
  MX_TIM2_Init();
 800104a:	f000 fc79 	bl	8001940 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800104e:	2100      	movs	r1, #0
 8001050:	48d8      	ldr	r0, [pc, #864]	@ (80013b4 <main+0x384>)
 8001052:	f002 fd91 	bl	8003b78 <HAL_TIM_IC_Start_IT>
  uint16_t switchState;
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001056:	2104      	movs	r1, #4
 8001058:	48d7      	ldr	r0, [pc, #860]	@ (80013b8 <main+0x388>)
 800105a:	f002 fc75 	bl	8003948 <HAL_TIM_PWM_Start>

HAL_Delay(100);
 800105e:	2064      	movs	r0, #100	@ 0x64
 8001060:	f000 fe0c 	bl	8001c7c <HAL_Delay>
//provjera konekcije OLED-a s I2C
  	if (HAL_I2C_IsDeviceReady(&hi2c1,ADDR, 1, 20000) != HAL_OK) {
 8001064:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001068:	2201      	movs	r2, #1
 800106a:	2178      	movs	r1, #120	@ 0x78
 800106c:	48d3      	ldr	r0, [pc, #844]	@ (80013bc <main+0x38c>)
 800106e:	f001 fb43 	bl	80026f8 <HAL_I2C_IsDeviceReady>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <main+0x4c>
  			return 0;
 8001078:	2300      	movs	r3, #0
 800107a:	e1e5      	b.n	8001448 <main+0x418>
  		}
  	//Inicijaliziranje OLED-a
  	Write(0x78,0x00,0xAE); // display OFF
 800107c:	22ae      	movs	r2, #174	@ 0xae
 800107e:	2100      	movs	r1, #0
 8001080:	2078      	movs	r0, #120	@ 0x78
 8001082:	f000 fa4b 	bl	800151c <Write>
  	Write(0x78,0x00,0x20); //Memory Addressing mode
 8001086:	2220      	movs	r2, #32
 8001088:	2100      	movs	r1, #0
 800108a:	2078      	movs	r0, #120	@ 0x78
 800108c:	f000 fa46 	bl	800151c <Write>
  	Write(0x78,0x00,0x10); //Page Addressing mode
 8001090:	2210      	movs	r2, #16
 8001092:	2100      	movs	r1, #0
 8001094:	2078      	movs	r0, #120	@ 0x78
 8001096:	f000 fa41 	bl	800151c <Write>
  	Write(0x78,0x00,0xB0); //Page start address
 800109a:	22b0      	movs	r2, #176	@ 0xb0
 800109c:	2100      	movs	r1, #0
 800109e:	2078      	movs	r0, #120	@ 0x78
 80010a0:	f000 fa3c 	bl	800151c <Write>
  	Write(0x78,0x00,0xC8); //COM output scan direction
 80010a4:	22c8      	movs	r2, #200	@ 0xc8
 80010a6:	2100      	movs	r1, #0
 80010a8:	2078      	movs	r0, #120	@ 0x78
 80010aa:	f000 fa37 	bl	800151c <Write>
  	Write(0x78,0x00,0x00); // low column address
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	2078      	movs	r0, #120	@ 0x78
 80010b4:	f000 fa32 	bl	800151c <Write>
  	Write(0x78,0x00,0x10); // high column address
 80010b8:	2210      	movs	r2, #16
 80010ba:	2100      	movs	r1, #0
 80010bc:	2078      	movs	r0, #120	@ 0x78
 80010be:	f000 fa2d 	bl	800151c <Write>
  	Write(0x78,0x00,0x40); // start line address
 80010c2:	2240      	movs	r2, #64	@ 0x40
 80010c4:	2100      	movs	r1, #0
 80010c6:	2078      	movs	r0, #120	@ 0x78
 80010c8:	f000 fa28 	bl	800151c <Write>
  	Write(0x78,0x00,0x81); // contrast register
 80010cc:	2281      	movs	r2, #129	@ 0x81
 80010ce:	2100      	movs	r1, #0
 80010d0:	2078      	movs	r0, #120	@ 0x78
 80010d2:	f000 fa23 	bl	800151c <Write>
  	Write(0x78,0x00,0xFF);
 80010d6:	22ff      	movs	r2, #255	@ 0xff
 80010d8:	2100      	movs	r1, #0
 80010da:	2078      	movs	r0, #120	@ 0x78
 80010dc:	f000 fa1e 	bl	800151c <Write>
  	Write(0x78,0x00,0xA1); // segment re-map 0 do 127
 80010e0:	22a1      	movs	r2, #161	@ 0xa1
 80010e2:	2100      	movs	r1, #0
 80010e4:	2078      	movs	r0, #120	@ 0x78
 80010e6:	f000 fa19 	bl	800151c <Write>
  	Write(0x78,0x00,0xA6); //normal display
 80010ea:	22a6      	movs	r2, #166	@ 0xa6
 80010ec:	2100      	movs	r1, #0
 80010ee:	2078      	movs	r0, #120	@ 0x78
 80010f0:	f000 fa14 	bl	800151c <Write>

  	Write(0x78,0x00,0xA8); //Height OxFF za 128 px, 0xA8 za sve ostalo
 80010f4:	22a8      	movs	r2, #168	@ 0xa8
 80010f6:	2100      	movs	r1, #0
 80010f8:	2078      	movs	r0, #120	@ 0x78
 80010fa:	f000 fa0f 	bl	800151c <Write>
  	Write(0x78,0x00,0x3F); // multiplex ratio
 80010fe:	223f      	movs	r2, #63	@ 0x3f
 8001100:	2100      	movs	r1, #0
 8001102:	2078      	movs	r0, #120	@ 0x78
 8001104:	f000 fa0a 	bl	800151c <Write>

  	Write(0x78,0x00,0xA4); //Output follows RAM
 8001108:	22a4      	movs	r2, #164	@ 0xa4
 800110a:	2100      	movs	r1, #0
 800110c:	2078      	movs	r0, #120	@ 0x78
 800110e:	f000 fa05 	bl	800151c <Write>
  	Write(0x78,0x00,0xD3); // display offset
 8001112:	22d3      	movs	r2, #211	@ 0xd3
 8001114:	2100      	movs	r1, #0
 8001116:	2078      	movs	r0, #120	@ 0x78
 8001118:	f000 fa00 	bl	800151c <Write>
  	Write(0x78,0x00,0x00); // not offset
 800111c:	2200      	movs	r2, #0
 800111e:	2100      	movs	r1, #0
 8001120:	2078      	movs	r0, #120	@ 0x78
 8001122:	f000 f9fb 	bl	800151c <Write>
  	Write(0x78,0x00,0xD5); // frequency
 8001126:	22d5      	movs	r2, #213	@ 0xd5
 8001128:	2100      	movs	r1, #0
 800112a:	2078      	movs	r0, #120	@ 0x78
 800112c:	f000 f9f6 	bl	800151c <Write>
  	Write(0x78,0x00,0xF0); // divide ratio
 8001130:	22f0      	movs	r2, #240	@ 0xf0
 8001132:	2100      	movs	r1, #0
 8001134:	2078      	movs	r0, #120	@ 0x78
 8001136:	f000 f9f1 	bl	800151c <Write>
  	Write(0x78,0x00,0xD9); // pre-charge period
 800113a:	22d9      	movs	r2, #217	@ 0xd9
 800113c:	2100      	movs	r1, #0
 800113e:	2078      	movs	r0, #120	@ 0x78
 8001140:	f000 f9ec 	bl	800151c <Write>
  	Write(0x78,0x00,0x22);
 8001144:	2222      	movs	r2, #34	@ 0x22
 8001146:	2100      	movs	r1, #0
 8001148:	2078      	movs	r0, #120	@ 0x78
 800114a:	f000 f9e7 	bl	800151c <Write>
  	Write(0x78,0x00,0xDA); // COM pin
 800114e:	22da      	movs	r2, #218	@ 0xda
 8001150:	2100      	movs	r1, #0
 8001152:	2078      	movs	r0, #120	@ 0x78
 8001154:	f000 f9e2 	bl	800151c <Write>
  	Write(0x78,0x00,0x12);
 8001158:	2212      	movs	r2, #18
 800115a:	2100      	movs	r1, #0
 800115c:	2078      	movs	r0, #120	@ 0x78
 800115e:	f000 f9dd 	bl	800151c <Write>

  	Write(0x78,0x00,0xDB); // Voltage pin (vcomh)
 8001162:	22db      	movs	r2, #219	@ 0xdb
 8001164:	2100      	movs	r1, #0
 8001166:	2078      	movs	r0, #120	@ 0x78
 8001168:	f000 f9d8 	bl	800151c <Write>
  	Write(0x78,0x00,0x20);
 800116c:	2220      	movs	r2, #32
 800116e:	2100      	movs	r1, #0
 8001170:	2078      	movs	r0, #120	@ 0x78
 8001172:	f000 f9d3 	bl	800151c <Write>
  	Write(0x78,0x00,0x8D); // DC-DC upaljen
 8001176:	228d      	movs	r2, #141	@ 0x8d
 8001178:	2100      	movs	r1, #0
 800117a:	2078      	movs	r0, #120	@ 0x78
 800117c:	f000 f9ce 	bl	800151c <Write>
  	Write(0x78,0x00,0x14);
 8001180:	2214      	movs	r2, #20
 8001182:	2100      	movs	r1, #0
 8001184:	2078      	movs	r0, #120	@ 0x78
 8001186:	f000 f9c9 	bl	800151c <Write>
  	Write(0x78,0x00,0xAF); //upali panel
 800118a:	22af      	movs	r2, #175	@ 0xaf
 800118c:	2100      	movs	r1, #0
 800118e:	2078      	movs	r0, #120	@ 0x78
 8001190:	f000 f9c4 	bl	800151c <Write>
  	//deaktiviraj scroll
  	Write(0x78,0x00,0x2E);
 8001194:	222e      	movs	r2, #46	@ 0x2e
 8001196:	2100      	movs	r1, #0
 8001198:	2078      	movs	r0, #120	@ 0x78
 800119a:	f000 f9bf 	bl	800151c <Write>
  	//Clear ekran
  	memset(Buffer, (0xFF) ? 0x00 : 0xFF, sizeof(Buffer));
 800119e:	f44f 6282 	mov.w	r2, #1040	@ 0x410
 80011a2:	2100      	movs	r1, #0
 80011a4:	4886      	ldr	r0, [pc, #536]	@ (80013c0 <main+0x390>)
 80011a6:	f003 fd05 	bl	8004bb4 <memset>
  	//Update ekran
  	uint8_t i;

  		for (i = 0; i < 8; i++) {
 80011aa:	2300      	movs	r3, #0
 80011ac:	71fb      	strb	r3, [r7, #7]
 80011ae:	e020      	b.n	80011f2 <main+0x1c2>
  			Write(0x78,0x00,0xB0+i);
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	33b0      	adds	r3, #176	@ 0xb0
 80011b4:	461a      	mov	r2, r3
 80011b6:	2100      	movs	r1, #0
 80011b8:	2078      	movs	r0, #120	@ 0x78
 80011ba:	f000 f9af 	bl	800151c <Write>
  			Write(0x78,0x00,0x00);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2078      	movs	r0, #120	@ 0x78
 80011c4:	f000 f9aa 	bl	800151c <Write>
  			Write(0x78,0x00,0x10);
 80011c8:	2210      	movs	r2, #16
 80011ca:	2100      	movs	r1, #0
 80011cc:	2078      	movs	r0, #120	@ 0x78
 80011ce:	f000 f9a5 	bl	800151c <Write>

  			WriteMulti(ADDR, 0x40, &Buffer[WIDTH * i], WIDTH);
 80011d2:	79fa      	ldrb	r2, [r7, #7]
 80011d4:	4613      	mov	r3, r2
 80011d6:	019b      	lsls	r3, r3, #6
 80011d8:	4413      	add	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	461a      	mov	r2, r3
 80011de:	4b78      	ldr	r3, [pc, #480]	@ (80013c0 <main+0x390>)
 80011e0:	441a      	add	r2, r3
 80011e2:	2382      	movs	r3, #130	@ 0x82
 80011e4:	2140      	movs	r1, #64	@ 0x40
 80011e6:	2078      	movs	r0, #120	@ 0x78
 80011e8:	f000 f9b6 	bl	8001558 <WriteMulti>
  		for (i = 0; i < 8; i++) {
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	3301      	adds	r3, #1
 80011f0:	71fb      	strb	r3, [r7, #7]
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	2b07      	cmp	r3, #7
 80011f6:	d9db      	bls.n	80011b0 <main+0x180>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UZ_Read();
 80011f8:	f7ff fefa 	bl	8000ff0 <UZ_Read>
	  	  HAL_Delay(200);
 80011fc:	20c8      	movs	r0, #200	@ 0xc8
 80011fe:	f000 fd3d 	bl	8001c7c <HAL_Delay>
	  	  switchState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001202:	2120      	movs	r1, #32
 8001204:	486f      	ldr	r0, [pc, #444]	@ (80013c4 <main+0x394>)
 8001206:	f001 f803 	bl	8002210 <HAL_GPIO_ReadPin>
 800120a:	4603      	mov	r3, r0
 800120c:	80bb      	strh	r3, [r7, #4]

	  	           if(switchState == 1){
 800120e:	88bb      	ldrh	r3, [r7, #4]
 8001210:	2b01      	cmp	r3, #1
 8001212:	f040 810e 	bne.w	8001432 <main+0x402>
	  	        	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001216:	2201      	movs	r2, #1
 8001218:	2180      	movs	r1, #128	@ 0x80
 800121a:	486b      	ldr	r0, [pc, #428]	@ (80013c8 <main+0x398>)
 800121c:	f001 f810 	bl	8002240 <HAL_GPIO_WritePin>
	  	        	   memset(Buffer, (0xFF) ? 0x00 : 0xFF, sizeof(Buffer));
 8001220:	f44f 6282 	mov.w	r2, #1040	@ 0x410
 8001224:	2100      	movs	r1, #0
 8001226:	4866      	ldr	r0, [pc, #408]	@ (80013c0 <main+0x390>)
 8001228:	f003 fcc4 	bl	8004bb4 <memset>
	  	        	   WriteBitmap(0,0,Priblizite_se_vratima,128,64,1);
 800122c:	2301      	movs	r3, #1
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	2340      	movs	r3, #64	@ 0x40
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2380      	movs	r3, #128	@ 0x80
 8001236:	4a65      	ldr	r2, [pc, #404]	@ (80013cc <main+0x39c>)
 8001238:	2100      	movs	r1, #0
 800123a:	2000      	movs	r0, #0
 800123c:	f000 fa48 	bl	80016d0 <WriteBitmap>


	  	        	   	for (i = 0; i < 8; i++){
 8001240:	2300      	movs	r3, #0
 8001242:	71fb      	strb	r3, [r7, #7]
 8001244:	e020      	b.n	8001288 <main+0x258>
	  	        	   		Write(0x78,0x00,0xB0+i);
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	33b0      	adds	r3, #176	@ 0xb0
 800124a:	461a      	mov	r2, r3
 800124c:	2100      	movs	r1, #0
 800124e:	2078      	movs	r0, #120	@ 0x78
 8001250:	f000 f964 	bl	800151c <Write>
	  	        	   		Write(0x78,0x00,0x00);
 8001254:	2200      	movs	r2, #0
 8001256:	2100      	movs	r1, #0
 8001258:	2078      	movs	r0, #120	@ 0x78
 800125a:	f000 f95f 	bl	800151c <Write>
	  	        	   		Write(0x78,0x00,0x10);
 800125e:	2210      	movs	r2, #16
 8001260:	2100      	movs	r1, #0
 8001262:	2078      	movs	r0, #120	@ 0x78
 8001264:	f000 f95a 	bl	800151c <Write>

	  	        	   		WriteMulti(ADDR, 0x40, &Buffer[WIDTH * i], WIDTH);
 8001268:	79fa      	ldrb	r2, [r7, #7]
 800126a:	4613      	mov	r3, r2
 800126c:	019b      	lsls	r3, r3, #6
 800126e:	4413      	add	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	461a      	mov	r2, r3
 8001274:	4b52      	ldr	r3, [pc, #328]	@ (80013c0 <main+0x390>)
 8001276:	441a      	add	r2, r3
 8001278:	2382      	movs	r3, #130	@ 0x82
 800127a:	2140      	movs	r1, #64	@ 0x40
 800127c:	2078      	movs	r0, #120	@ 0x78
 800127e:	f000 f96b 	bl	8001558 <WriteMulti>
	  	        	   	for (i = 0; i < 8; i++){
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	3301      	adds	r3, #1
 8001286:	71fb      	strb	r3, [r7, #7]
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b07      	cmp	r3, #7
 800128c:	d9db      	bls.n	8001246 <main+0x216>
	  	        	   		}
	  	        	   	if(udaljenost < 10){
 800128e:	4b50      	ldr	r3, [pc, #320]	@ (80013d0 <main+0x3a0>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b09      	cmp	r3, #9
 8001294:	f200 80c7 	bhi.w	8001426 <main+0x3f6>
	  	        	  	  	           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	2140      	movs	r1, #64	@ 0x40
 800129c:	484a      	ldr	r0, [pc, #296]	@ (80013c8 <main+0x398>)
 800129e:	f000 ffcf 	bl	8002240 <HAL_GPIO_WritePin>
	  	        	  	  	     memset(Buffer, (0xFF) ? 0x00 : 0xFF, sizeof(Buffer));
 80012a2:	f44f 6282 	mov.w	r2, #1040	@ 0x410
 80012a6:	2100      	movs	r1, #0
 80012a8:	4845      	ldr	r0, [pc, #276]	@ (80013c0 <main+0x390>)
 80012aa:	f003 fc83 	bl	8004bb4 <memset>
	  	        	  	  	     WriteBitmap(0,0,Pricekajte,128,64,1);
 80012ae:	2301      	movs	r3, #1
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	2340      	movs	r3, #64	@ 0x40
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2380      	movs	r3, #128	@ 0x80
 80012b8:	4a46      	ldr	r2, [pc, #280]	@ (80013d4 <main+0x3a4>)
 80012ba:	2100      	movs	r1, #0
 80012bc:	2000      	movs	r0, #0
 80012be:	f000 fa07 	bl	80016d0 <WriteBitmap>

	  	        	  	  	     	 	 for (i = 0; i < 8; i++) {
 80012c2:	2300      	movs	r3, #0
 80012c4:	71fb      	strb	r3, [r7, #7]
 80012c6:	e020      	b.n	800130a <main+0x2da>
	  	        	  	  	     	  	      	  Write(0x78,0x00,0xB0+i);
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	33b0      	adds	r3, #176	@ 0xb0
 80012cc:	461a      	mov	r2, r3
 80012ce:	2100      	movs	r1, #0
 80012d0:	2078      	movs	r0, #120	@ 0x78
 80012d2:	f000 f923 	bl	800151c <Write>
	  	        	  	  	     	  	      	  Write(0x78,0x00,0x00);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	2078      	movs	r0, #120	@ 0x78
 80012dc:	f000 f91e 	bl	800151c <Write>
	  	        	  	  	     	  	      	  Write(0x78,0x00,0x10);
 80012e0:	2210      	movs	r2, #16
 80012e2:	2100      	movs	r1, #0
 80012e4:	2078      	movs	r0, #120	@ 0x78
 80012e6:	f000 f919 	bl	800151c <Write>
	  	        	  	  	     	  	      	  WriteMulti(ADDR, 0x40, &Buffer[WIDTH * i], WIDTH);
 80012ea:	79fa      	ldrb	r2, [r7, #7]
 80012ec:	4613      	mov	r3, r2
 80012ee:	019b      	lsls	r3, r3, #6
 80012f0:	4413      	add	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b32      	ldr	r3, [pc, #200]	@ (80013c0 <main+0x390>)
 80012f8:	441a      	add	r2, r3
 80012fa:	2382      	movs	r3, #130	@ 0x82
 80012fc:	2140      	movs	r1, #64	@ 0x40
 80012fe:	2078      	movs	r0, #120	@ 0x78
 8001300:	f000 f92a 	bl	8001558 <WriteMulti>
	  	        	  	  	     	 	 for (i = 0; i < 8; i++) {
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	3301      	adds	r3, #1
 8001308:	71fb      	strb	r3, [r7, #7]
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	2b07      	cmp	r3, #7
 800130e:	d9db      	bls.n	80012c8 <main+0x298>
	  	        	  	  	     	 	 	 	  }

	  	        	  	  	           HAL_Delay(1000);
 8001310:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001314:	f000 fcb2 	bl	8001c7c <HAL_Delay>
	  	      	  	        	   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,2000);
 8001318:	4b27      	ldr	r3, [pc, #156]	@ (80013b8 <main+0x388>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001320:	639a      	str	r2, [r3, #56]	@ 0x38
	  	      	  	        	   HAL_Delay(500);
 8001322:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001326:	f000 fca9 	bl	8001c7c <HAL_Delay>
	  	      	  	        	memset(Buffer, (0xFF) ? 0x00 : 0xFF, sizeof(Buffer));
 800132a:	f44f 6282 	mov.w	r2, #1040	@ 0x410
 800132e:	2100      	movs	r1, #0
 8001330:	4823      	ldr	r0, [pc, #140]	@ (80013c0 <main+0x390>)
 8001332:	f003 fc3f 	bl	8004bb4 <memset>
	  	      	  	        	WriteBitmap(0,0,Prodite,128,64,1);
 8001336:	2301      	movs	r3, #1
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	2340      	movs	r3, #64	@ 0x40
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2380      	movs	r3, #128	@ 0x80
 8001340:	4a25      	ldr	r2, [pc, #148]	@ (80013d8 <main+0x3a8>)
 8001342:	2100      	movs	r1, #0
 8001344:	2000      	movs	r0, #0
 8001346:	f000 f9c3 	bl	80016d0 <WriteBitmap>

	  	      	  	        			for (i = 0; i < 8; i++) {
 800134a:	2300      	movs	r3, #0
 800134c:	71fb      	strb	r3, [r7, #7]
 800134e:	e020      	b.n	8001392 <main+0x362>
	  	      	  	        					Write(0x78,0x00,0xB0+i);
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	33b0      	adds	r3, #176	@ 0xb0
 8001354:	461a      	mov	r2, r3
 8001356:	2100      	movs	r1, #0
 8001358:	2078      	movs	r0, #120	@ 0x78
 800135a:	f000 f8df 	bl	800151c <Write>
	  	      	  	        		  	   		Write(0x78,0x00,0x00);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	2078      	movs	r0, #120	@ 0x78
 8001364:	f000 f8da 	bl	800151c <Write>
	  	      	  	        		  	   		Write(0x78,0x00,0x10);
 8001368:	2210      	movs	r2, #16
 800136a:	2100      	movs	r1, #0
 800136c:	2078      	movs	r0, #120	@ 0x78
 800136e:	f000 f8d5 	bl	800151c <Write>
	  	      	  	        		  	   		WriteMulti(ADDR, 0x40, &Buffer[WIDTH * i], WIDTH);
 8001372:	79fa      	ldrb	r2, [r7, #7]
 8001374:	4613      	mov	r3, r2
 8001376:	019b      	lsls	r3, r3, #6
 8001378:	4413      	add	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	461a      	mov	r2, r3
 800137e:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <main+0x390>)
 8001380:	441a      	add	r2, r3
 8001382:	2382      	movs	r3, #130	@ 0x82
 8001384:	2140      	movs	r1, #64	@ 0x40
 8001386:	2078      	movs	r0, #120	@ 0x78
 8001388:	f000 f8e6 	bl	8001558 <WriteMulti>
	  	      	  	        			for (i = 0; i < 8; i++) {
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	3301      	adds	r3, #1
 8001390:	71fb      	strb	r3, [r7, #7]
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2b07      	cmp	r3, #7
 8001396:	d9db      	bls.n	8001350 <main+0x320>
	  	      	  	        		  	   		}


	  	      	  	        	HAL_Delay(5000);
 8001398:	f241 3088 	movw	r0, #5000	@ 0x1388
 800139c:	f000 fc6e 	bl	8001c7c <HAL_Delay>
	  	      	  	        	memset(Buffer, (0xFF) ? 0x00 : 0xFF, sizeof(Buffer));
 80013a0:	f44f 6282 	mov.w	r2, #1040	@ 0x410
 80013a4:	2100      	movs	r1, #0
 80013a6:	4806      	ldr	r0, [pc, #24]	@ (80013c0 <main+0x390>)
 80013a8:	f003 fc04 	bl	8004bb4 <memset>

	  	      	  	        	for (i = 0; i < 8; i++) {
 80013ac:	2300      	movs	r3, #0
 80013ae:	71fb      	strb	r3, [r7, #7]
 80013b0:	e035      	b.n	800141e <main+0x3ee>
 80013b2:	bf00      	nop
 80013b4:	2000049c 	.word	0x2000049c
 80013b8:	200004e4 	.word	0x200004e4
 80013bc:	20000028 	.word	0x20000028
 80013c0:	2000007c 	.word	0x2000007c
 80013c4:	40020400 	.word	0x40020400
 80013c8:	40020000 	.word	0x40020000
 80013cc:	08004c24 	.word	0x08004c24
 80013d0:	20000499 	.word	0x20000499
 80013d4:	08005024 	.word	0x08005024
 80013d8:	08005424 	.word	0x08005424
	  	        	   	        	   		Write(0x78,0x00,0xB0+i);
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	33b0      	adds	r3, #176	@ 0xb0
 80013e0:	461a      	mov	r2, r3
 80013e2:	2100      	movs	r1, #0
 80013e4:	2078      	movs	r0, #120	@ 0x78
 80013e6:	f000 f899 	bl	800151c <Write>
	  	        	   	        	   		Write(0x78,0x00,0x00);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	2078      	movs	r0, #120	@ 0x78
 80013f0:	f000 f894 	bl	800151c <Write>
	  	        	   	        	   		Write(0x78,0x00,0x10);
 80013f4:	2210      	movs	r2, #16
 80013f6:	2100      	movs	r1, #0
 80013f8:	2078      	movs	r0, #120	@ 0x78
 80013fa:	f000 f88f 	bl	800151c <Write>
	  	        	   	        	   		WriteMulti(ADDR, 0x40, &Buffer[WIDTH * i], WIDTH);
 80013fe:	79fa      	ldrb	r2, [r7, #7]
 8001400:	4613      	mov	r3, r2
 8001402:	019b      	lsls	r3, r3, #6
 8001404:	4413      	add	r3, r2
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	461a      	mov	r2, r3
 800140a:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <main+0x420>)
 800140c:	441a      	add	r2, r3
 800140e:	2382      	movs	r3, #130	@ 0x82
 8001410:	2140      	movs	r1, #64	@ 0x40
 8001412:	2078      	movs	r0, #120	@ 0x78
 8001414:	f000 f8a0 	bl	8001558 <WriteMulti>
	  	      	  	        	for (i = 0; i < 8; i++) {
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	3301      	adds	r3, #1
 800141c:	71fb      	strb	r3, [r7, #7]
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	2b07      	cmp	r3, #7
 8001422:	d9db      	bls.n	80013dc <main+0x3ac>
 8001424:	e6e8      	b.n	80011f8 <main+0x1c8>
	  	        	   	        	   		}
	  	        	   	}else{
	  	        	   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,1000);
 8001426:	4b0b      	ldr	r3, [pc, #44]	@ (8001454 <main+0x424>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800142e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001430:	e6e2      	b.n	80011f8 <main+0x1c8>

	  	           }
	  	           }else{
	  	           HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	2140      	movs	r1, #64	@ 0x40
 8001436:	4808      	ldr	r0, [pc, #32]	@ (8001458 <main+0x428>)
 8001438:	f000 ff02 	bl	8002240 <HAL_GPIO_WritePin>
	  	           __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,1000);
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <main+0x424>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001444:	639a      	str	r2, [r3, #56]	@ 0x38
	  UZ_Read();
 8001446:	e6d7      	b.n	80011f8 <main+0x1c8>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000007c 	.word	0x2000007c
 8001454:	200004e4 	.word	0x200004e4
 8001458:	40020000 	.word	0x40020000

0800145c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b094      	sub	sp, #80	@ 0x50
 8001460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	2234      	movs	r2, #52	@ 0x34
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f003 fba2 	bl	8004bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001470:	f107 0308 	add.w	r3, r7, #8
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001480:	2300      	movs	r3, #0
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	4b23      	ldr	r3, [pc, #140]	@ (8001514 <SystemClock_Config+0xb8>)
 8001486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001488:	4a22      	ldr	r2, [pc, #136]	@ (8001514 <SystemClock_Config+0xb8>)
 800148a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800148e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001490:	4b20      	ldr	r3, [pc, #128]	@ (8001514 <SystemClock_Config+0xb8>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001494:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800149c:	2300      	movs	r3, #0
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001518 <SystemClock_Config+0xbc>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001518 <SystemClock_Config+0xbc>)
 80014aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b19      	ldr	r3, [pc, #100]	@ (8001518 <SystemClock_Config+0xbc>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014bc:	2302      	movs	r3, #2
 80014be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c0:	2301      	movs	r3, #1
 80014c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c4:	2310      	movs	r3, #16
 80014c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014cc:	f107 031c 	add.w	r3, r7, #28
 80014d0:	4618      	mov	r0, r3
 80014d2:	f001 ff4b 	bl	800336c <HAL_RCC_OscConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80014dc:	f000 f95f 	bl	800179e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e0:	230f      	movs	r3, #15
 80014e2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014f4:	f107 0308 	add.w	r3, r7, #8
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f001 fc86 	bl	8002e0c <HAL_RCC_ClockConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001506:	f000 f94a 	bl	800179e <Error_Handler>
  }
}
 800150a:	bf00      	nop
 800150c:	3750      	adds	r7, #80	@ 0x50
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40007000 	.word	0x40007000

0800151c <Write>:

/* USER CODE BEGIN 4 */
void Write(uint8_t address, uint8_t reg, uint8_t data) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af02      	add	r7, sp, #8
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
 8001526:	460b      	mov	r3, r1
 8001528:	71bb      	strb	r3, [r7, #6]
 800152a:	4613      	mov	r3, r2
 800152c:	717b      	strb	r3, [r7, #5]
 	uint8_t a[2];
 	a[0] = reg;
 800152e:	79bb      	ldrb	r3, [r7, #6]
 8001530:	733b      	strb	r3, [r7, #12]
 	a[1] = data;
 8001532:	797b      	ldrb	r3, [r7, #5]
 8001534:	737b      	strb	r3, [r7, #13]
 	HAL_I2C_Master_Transmit(&hi2c1, address, a, 2, 10);
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	b299      	uxth	r1, r3
 800153a:	f107 020c 	add.w	r2, r7, #12
 800153e:	230a      	movs	r3, #10
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	2302      	movs	r3, #2
 8001544:	4803      	ldr	r0, [pc, #12]	@ (8001554 <Write+0x38>)
 8001546:	f000 ffd9 	bl	80024fc <HAL_I2C_Master_Transmit>
 }
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000028 	.word	0x20000028

08001558 <WriteMulti>:

void WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b0c7      	sub	sp, #284	@ 0x11c
 800155c:	af02      	add	r7, sp, #8
 800155e:	4604      	mov	r4, r0
 8001560:	4608      	mov	r0, r1
 8001562:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001566:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800156a:	600a      	str	r2, [r1, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001572:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001576:	4622      	mov	r2, r4
 8001578:	701a      	strb	r2, [r3, #0]
 800157a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800157e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001582:	4602      	mov	r2, r0
 8001584:	701a      	strb	r2, [r3, #0]
 8001586:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800158a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800158e:	460a      	mov	r2, r1
 8001590:	801a      	strh	r2, [r3, #0]
	uint8_t a[256];
	a[0] = reg;
 8001592:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001596:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800159a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800159e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80015a2:	7812      	ldrb	r2, [r2, #0]
 80015a4:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80015ac:	e015      	b.n	80015da <WriteMulti+0x82>
			a[i+1] = data[i];
 80015ae:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80015b2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80015b6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	441a      	add	r2, r3
 80015be:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80015c2:	3301      	adds	r3, #1
 80015c4:	7811      	ldrb	r1, [r2, #0]
 80015c6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80015ca:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80015ce:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 80015d0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80015d4:	3301      	adds	r3, #1
 80015d6:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80015da:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80015de:	b29b      	uxth	r3, r3
 80015e0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80015e4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80015e8:	8812      	ldrh	r2, [r2, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d8df      	bhi.n	80015ae <WriteMulti+0x56>
			HAL_I2C_Master_Transmit(&hi2c1, address, a, count+1, 10);
 80015ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015f2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b299      	uxth	r1, r3
 80015fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	b29b      	uxth	r3, r3
 8001608:	f107 020c 	add.w	r2, r7, #12
 800160c:	200a      	movs	r0, #10
 800160e:	9000      	str	r0, [sp, #0]
 8001610:	4803      	ldr	r0, [pc, #12]	@ (8001620 <WriteMulti+0xc8>)
 8001612:	f000 ff73 	bl	80024fc <HAL_I2C_Master_Transmit>
	}
 8001616:	bf00      	nop
 8001618:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800161c:	46bd      	mov	sp, r7
 800161e:	bd90      	pop	{r4, r7, pc}
 8001620:	20000028 	.word	0x20000028

08001624 <WritePixel>:

void WritePixel(uint16_t x, uint16_t y,uint16_t color) {
 8001624:	b490      	push	{r4, r7}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	80fb      	strh	r3, [r7, #6]
 800162e:	460b      	mov	r3, r1
 8001630:	80bb      	strh	r3, [r7, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	807b      	strh	r3, [r7, #2]
	if (color == 1) {
 8001636:	887b      	ldrh	r3, [r7, #2]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d120      	bne.n	800167e <WritePixel+0x5a>
			Buffer[x + (y / 8) * WIDTH] |= 1 << (y % 8);
 800163c:	88fa      	ldrh	r2, [r7, #6]
 800163e:	88bb      	ldrh	r3, [r7, #4]
 8001640:	08db      	lsrs	r3, r3, #3
 8001642:	b298      	uxth	r0, r3
 8001644:	4601      	mov	r1, r0
 8001646:	460b      	mov	r3, r1
 8001648:	019b      	lsls	r3, r3, #6
 800164a:	440b      	add	r3, r1
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	4a1e      	ldr	r2, [pc, #120]	@ (80016cc <WritePixel+0xa8>)
 8001652:	5cd3      	ldrb	r3, [r2, r3]
 8001654:	b25a      	sxtb	r2, r3
 8001656:	88bb      	ldrh	r3, [r7, #4]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	2101      	movs	r1, #1
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	b25b      	sxtb	r3, r3
 8001664:	4313      	orrs	r3, r2
 8001666:	b25c      	sxtb	r4, r3
 8001668:	88fa      	ldrh	r2, [r7, #6]
 800166a:	4601      	mov	r1, r0
 800166c:	460b      	mov	r3, r1
 800166e:	019b      	lsls	r3, r3, #6
 8001670:	440b      	add	r3, r1
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4413      	add	r3, r2
 8001676:	b2e1      	uxtb	r1, r4
 8001678:	4a14      	ldr	r2, [pc, #80]	@ (80016cc <WritePixel+0xa8>)
 800167a:	54d1      	strb	r1, [r2, r3]
		} else {
			Buffer[x + (y / 8) * WIDTH] &= ~(1 << (y % 8));
		}
	}
 800167c:	e021      	b.n	80016c2 <WritePixel+0x9e>
			Buffer[x + (y / 8) * WIDTH] &= ~(1 << (y % 8));
 800167e:	88fa      	ldrh	r2, [r7, #6]
 8001680:	88bb      	ldrh	r3, [r7, #4]
 8001682:	08db      	lsrs	r3, r3, #3
 8001684:	b298      	uxth	r0, r3
 8001686:	4601      	mov	r1, r0
 8001688:	460b      	mov	r3, r1
 800168a:	019b      	lsls	r3, r3, #6
 800168c:	440b      	add	r3, r1
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4413      	add	r3, r2
 8001692:	4a0e      	ldr	r2, [pc, #56]	@ (80016cc <WritePixel+0xa8>)
 8001694:	5cd3      	ldrb	r3, [r2, r3]
 8001696:	b25a      	sxtb	r2, r3
 8001698:	88bb      	ldrh	r3, [r7, #4]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	2101      	movs	r1, #1
 80016a0:	fa01 f303 	lsl.w	r3, r1, r3
 80016a4:	b25b      	sxtb	r3, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	4013      	ands	r3, r2
 80016ac:	b25c      	sxtb	r4, r3
 80016ae:	88fa      	ldrh	r2, [r7, #6]
 80016b0:	4601      	mov	r1, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	019b      	lsls	r3, r3, #6
 80016b6:	440b      	add	r3, r1
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	b2e1      	uxtb	r1, r4
 80016be:	4a03      	ldr	r2, [pc, #12]	@ (80016cc <WritePixel+0xa8>)
 80016c0:	54d1      	strb	r1, [r2, r3]
	}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc90      	pop	{r4, r7}
 80016ca:	4770      	bx	lr
 80016cc:	2000007c 	.word	0x2000007c

080016d0 <WriteBitmap>:

void WriteBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60ba      	str	r2, [r7, #8]
 80016d8:	461a      	mov	r2, r3
 80016da:	4603      	mov	r3, r0
 80016dc:	81fb      	strh	r3, [r7, #14]
 80016de:	460b      	mov	r3, r1
 80016e0:	81bb      	strh	r3, [r7, #12]
 80016e2:	4613      	mov	r3, r2
 80016e4:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w+7)/8;
 80016e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ea:	3307      	adds	r3, #7
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	da00      	bge.n	80016f2 <WriteBitmap+0x22>
 80016f0:	3307      	adds	r3, #7
 80016f2:	10db      	asrs	r3, r3, #3
 80016f4:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++){
 80016fa:	2300      	movs	r3, #0
 80016fc:	82bb      	strh	r3, [r7, #20]
 80016fe:	e043      	b.n	8001788 <WriteBitmap+0xb8>
        for(int16_t i=0; i<w; i++){
 8001700:	2300      	movs	r3, #0
 8001702:	827b      	strh	r3, [r7, #18]
 8001704:	e02e      	b.n	8001764 <WriteBitmap+0x94>
            if(i & 7){
 8001706:	8a7b      	ldrh	r3, [r7, #18]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <WriteBitmap+0x48>
               byte <<= 1;
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	75fb      	strb	r3, [r7, #23]
 8001716:	e012      	b.n	800173e <WriteBitmap+0x6e>
            }else{
            	byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001718:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800171c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001720:	fb03 f202 	mul.w	r2, r3, r2
 8001724:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001728:	2b00      	cmp	r3, #0
 800172a:	da00      	bge.n	800172e <WriteBitmap+0x5e>
 800172c:	3307      	adds	r3, #7
 800172e:	10db      	asrs	r3, r3, #3
 8001730:	b21b      	sxth	r3, r3
 8001732:	4413      	add	r3, r2
 8001734:	461a      	mov	r2, r3
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	4413      	add	r3, r2
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	75fb      	strb	r3, [r7, #23]
            }if(byte & 0x80)
 800173e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001742:	2b00      	cmp	r3, #0
 8001744:	da08      	bge.n	8001758 <WriteBitmap+0x88>
            	WritePixel(x+i, y, color);
 8001746:	89fa      	ldrh	r2, [r7, #14]
 8001748:	8a7b      	ldrh	r3, [r7, #18]
 800174a:	4413      	add	r3, r2
 800174c:	b29b      	uxth	r3, r3
 800174e:	89b9      	ldrh	r1, [r7, #12]
 8001750:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff ff66 	bl	8001624 <WritePixel>
        for(int16_t i=0; i<w; i++){
 8001758:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800175c:	b29b      	uxth	r3, r3
 800175e:	3301      	adds	r3, #1
 8001760:	b29b      	uxth	r3, r3
 8001762:	827b      	strh	r3, [r7, #18]
 8001764:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001768:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800176c:	429a      	cmp	r2, r3
 800176e:	dbca      	blt.n	8001706 <WriteBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++){
 8001770:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001774:	b29b      	uxth	r3, r3
 8001776:	3301      	adds	r3, #1
 8001778:	b29b      	uxth	r3, r3
 800177a:	82bb      	strh	r3, [r7, #20]
 800177c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001780:	b29b      	uxth	r3, r3
 8001782:	3301      	adds	r3, #1
 8001784:	b29b      	uxth	r3, r3
 8001786:	81bb      	strh	r3, [r7, #12]
 8001788:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800178c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001790:	429a      	cmp	r2, r3
 8001792:	dbb5      	blt.n	8001700 <WriteBitmap+0x30>
        }
    }
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a2:	b672      	cpsid	i
}
 80017a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a6:	bf00      	nop
 80017a8:	e7fd      	b.n	80017a6 <Error_Handler+0x8>
	...

080017ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ba:	4a0f      	ldr	r2, [pc, #60]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017c2:	4b0d      	ldr	r3, [pc, #52]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	4a08      	ldr	r2, [pc, #32]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017de:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800

080017fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <NMI_Handler+0x4>

08001804 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <HardFault_Handler+0x4>

0800180c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <MemManage_Handler+0x4>

08001814 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <BusFault_Handler+0x4>

0800181c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <UsageFault_Handler+0x4>

08001824 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001852:	f000 f9f3 	bl	8001c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001860:	4802      	ldr	r0, [pc, #8]	@ (800186c <TIM1_CC_IRQHandler+0x10>)
 8001862:	f002 fab1 	bl	8003dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	2000049c 	.word	0x2000049c

08001870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <SystemInit+0x20>)
 8001876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800187a:	4a05      	ldr	r2, [pc, #20]	@ (8001890 <SystemInit+0x20>)
 800187c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001880:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800189a:	f107 0310 	add.w	r3, r7, #16
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018a4:	463b      	mov	r3, r7
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018b0:	4b21      	ldr	r3, [pc, #132]	@ (8001938 <MX_TIM1_Init+0xa4>)
 80018b2:	4a22      	ldr	r2, [pc, #136]	@ (800193c <MX_TIM1_Init+0xa8>)
 80018b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80018b6:	4b20      	ldr	r3, [pc, #128]	@ (8001938 <MX_TIM1_Init+0xa4>)
 80018b8:	220f      	movs	r2, #15
 80018ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001938 <MX_TIM1_Init+0xa4>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xfffe;
 80018c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001938 <MX_TIM1_Init+0xa4>)
 80018c4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80018c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001938 <MX_TIM1_Init+0xa4>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018d0:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <MX_TIM1_Init+0xa4>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d6:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <MX_TIM1_Init+0xa4>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80018dc:	4816      	ldr	r0, [pc, #88]	@ (8001938 <MX_TIM1_Init+0xa4>)
 80018de:	f002 f8fb 	bl	8003ad8 <HAL_TIM_IC_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80018e8:	f7ff ff59 	bl	800179e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ec:	2300      	movs	r3, #0
 80018ee:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	4619      	mov	r1, r3
 80018fa:	480f      	ldr	r0, [pc, #60]	@ (8001938 <MX_TIM1_Init+0xa4>)
 80018fc:	f003 f8ca 	bl	8004a94 <HAL_TIMEx_MasterConfigSynchronization>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001906:	f7ff ff4a 	bl	800179e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800190a:	2300      	movs	r3, #0
 800190c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800190e:	2301      	movs	r3, #1
 8001910:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800191a:	463b      	mov	r3, r7
 800191c:	2200      	movs	r2, #0
 800191e:	4619      	mov	r1, r3
 8001920:	4805      	ldr	r0, [pc, #20]	@ (8001938 <MX_TIM1_Init+0xa4>)
 8001922:	f002 fb41 	bl	8003fa8 <HAL_TIM_IC_ConfigChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800192c:	f7ff ff37 	bl	800179e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	2000049c 	.word	0x2000049c
 800193c:	40010000 	.word	0x40010000

08001940 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	@ 0x28
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001946:	f107 0320 	add.w	r3, r7, #32
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	611a      	str	r2, [r3, #16]
 800195e:	615a      	str	r2, [r3, #20]
 8001960:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001962:	4b23      	ldr	r3, [pc, #140]	@ (80019f0 <MX_TIM2_Init+0xb0>)
 8001964:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001968:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 800196a:	4b21      	ldr	r3, [pc, #132]	@ (80019f0 <MX_TIM2_Init+0xb0>)
 800196c:	220f      	movs	r2, #15
 800196e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001970:	4b1f      	ldr	r3, [pc, #124]	@ (80019f0 <MX_TIM2_Init+0xb0>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001976:	4b1e      	ldr	r3, [pc, #120]	@ (80019f0 <MX_TIM2_Init+0xb0>)
 8001978:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800197c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800197e:	4b1c      	ldr	r3, [pc, #112]	@ (80019f0 <MX_TIM2_Init+0xb0>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001984:	4b1a      	ldr	r3, [pc, #104]	@ (80019f0 <MX_TIM2_Init+0xb0>)
 8001986:	2200      	movs	r2, #0
 8001988:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800198a:	4819      	ldr	r0, [pc, #100]	@ (80019f0 <MX_TIM2_Init+0xb0>)
 800198c:	f001 ff8c 	bl	80038a8 <HAL_TIM_PWM_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001996:	f7ff ff02 	bl	800179e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019a2:	f107 0320 	add.w	r3, r7, #32
 80019a6:	4619      	mov	r1, r3
 80019a8:	4811      	ldr	r0, [pc, #68]	@ (80019f0 <MX_TIM2_Init+0xb0>)
 80019aa:	f003 f873 	bl	8004a94 <HAL_TIMEx_MasterConfigSynchronization>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80019b4:	f7ff fef3 	bl	800179e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019b8:	2360      	movs	r3, #96	@ 0x60
 80019ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80019bc:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80019c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	2204      	movs	r2, #4
 80019ce:	4619      	mov	r1, r3
 80019d0:	4807      	ldr	r0, [pc, #28]	@ (80019f0 <MX_TIM2_Init+0xb0>)
 80019d2:	f002 fb85 	bl	80040e0 <HAL_TIM_PWM_ConfigChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80019dc:	f7ff fedf 	bl	800179e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019e0:	4803      	ldr	r0, [pc, #12]	@ (80019f0 <MX_TIM2_Init+0xb0>)
 80019e2:	f000 f877 	bl	8001ad4 <HAL_TIM_MspPostInit>

}
 80019e6:	bf00      	nop
 80019e8:	3728      	adds	r7, #40	@ 0x28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200004e4 	.word	0x200004e4

080019f4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	@ 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a1d      	ldr	r2, [pc, #116]	@ (8001a88 <HAL_TIM_IC_MspInit+0x94>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d134      	bne.n	8001a80 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a8c <HAL_TIM_IC_MspInit+0x98>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	4a1b      	ldr	r2, [pc, #108]	@ (8001a8c <HAL_TIM_IC_MspInit+0x98>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a26:	4b19      	ldr	r3, [pc, #100]	@ (8001a8c <HAL_TIM_IC_MspInit+0x98>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b15      	ldr	r3, [pc, #84]	@ (8001a8c <HAL_TIM_IC_MspInit+0x98>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	4a14      	ldr	r2, [pc, #80]	@ (8001a8c <HAL_TIM_IC_MspInit+0x98>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a42:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <HAL_TIM_IC_MspInit+0x98>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a60:	2301      	movs	r3, #1
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4809      	ldr	r0, [pc, #36]	@ (8001a90 <HAL_TIM_IC_MspInit+0x9c>)
 8001a6c:	f000 fa3c 	bl	8001ee8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	201b      	movs	r0, #27
 8001a76:	f000 fa00 	bl	8001e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001a7a:	201b      	movs	r0, #27
 8001a7c:	f000 fa19 	bl	8001eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001a80:	bf00      	nop
 8001a82:	3728      	adds	r7, #40	@ 0x28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40010000 	.word	0x40010000
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40020000 	.word	0x40020000

08001a94 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aa4:	d10d      	bne.n	8001ac2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	4a08      	ldr	r2, [pc, #32]	@ (8001ad0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab6:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40023800 	.word	0x40023800

08001ad4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001af4:	d11d      	bne.n	8001b32 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <HAL_TIM_MspPostInit+0x68>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	4a0f      	ldr	r2, [pc, #60]	@ (8001b3c <HAL_TIM_MspPostInit+0x68>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b06:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <HAL_TIM_MspPostInit+0x68>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b12:	2302      	movs	r3, #2
 8001b14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b22:	2301      	movs	r3, #1
 8001b24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b26:	f107 030c 	add.w	r3, r7, #12
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4804      	ldr	r0, [pc, #16]	@ (8001b40 <HAL_TIM_MspPostInit+0x6c>)
 8001b2e:	f000 f9db 	bl	8001ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b32:	bf00      	nop
 8001b34:	3720      	adds	r7, #32
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020000 	.word	0x40020000

08001b44 <Reset_Handler>:
 8001b44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b7c <LoopFillZerobss+0xe>
 8001b48:	f7ff fe92 	bl	8001870 <SystemInit>
 8001b4c:	480c      	ldr	r0, [pc, #48]	@ (8001b80 <LoopFillZerobss+0x12>)
 8001b4e:	490d      	ldr	r1, [pc, #52]	@ (8001b84 <LoopFillZerobss+0x16>)
 8001b50:	4a0d      	ldr	r2, [pc, #52]	@ (8001b88 <LoopFillZerobss+0x1a>)
 8001b52:	2300      	movs	r3, #0
 8001b54:	e002      	b.n	8001b5c <LoopCopyDataInit>

08001b56 <CopyDataInit>:
 8001b56:	58d4      	ldr	r4, [r2, r3]
 8001b58:	50c4      	str	r4, [r0, r3]
 8001b5a:	3304      	adds	r3, #4

08001b5c <LoopCopyDataInit>:
 8001b5c:	18c4      	adds	r4, r0, r3
 8001b5e:	428c      	cmp	r4, r1
 8001b60:	d3f9      	bcc.n	8001b56 <CopyDataInit>
 8001b62:	4a0a      	ldr	r2, [pc, #40]	@ (8001b8c <LoopFillZerobss+0x1e>)
 8001b64:	4c0a      	ldr	r4, [pc, #40]	@ (8001b90 <LoopFillZerobss+0x22>)
 8001b66:	2300      	movs	r3, #0
 8001b68:	e001      	b.n	8001b6e <LoopFillZerobss>

08001b6a <FillZerobss>:
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	3204      	adds	r2, #4

08001b6e <LoopFillZerobss>:
 8001b6e:	42a2      	cmp	r2, r4
 8001b70:	d3fb      	bcc.n	8001b6a <FillZerobss>
 8001b72:	f003 f827 	bl	8004bc4 <__libc_init_array>
 8001b76:	f7ff fa5b 	bl	8001030 <main>
 8001b7a:	4770      	bx	lr
 8001b7c:	20020000 	.word	0x20020000
 8001b80:	20000000 	.word	0x20000000
 8001b84:	2000000c 	.word	0x2000000c
 8001b88:	0800584c 	.word	0x0800584c
 8001b8c:	2000000c 	.word	0x2000000c
 8001b90:	20000530 	.word	0x20000530

08001b94 <ADC_IRQHandler>:
 8001b94:	e7fe      	b.n	8001b94 <ADC_IRQHandler>
	...

08001b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd8 <HAL_Init+0x40>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd8 <HAL_Init+0x40>)
 8001ba2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ba6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd8 <HAL_Init+0x40>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <HAL_Init+0x40>)
 8001bae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb4:	4b08      	ldr	r3, [pc, #32]	@ (8001bd8 <HAL_Init+0x40>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a07      	ldr	r2, [pc, #28]	@ (8001bd8 <HAL_Init+0x40>)
 8001bba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc0:	2003      	movs	r0, #3
 8001bc2:	f000 f94f 	bl	8001e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc6:	200f      	movs	r0, #15
 8001bc8:	f000 f808 	bl	8001bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bcc:	f7ff fdee 	bl	80017ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023c00 	.word	0x40023c00

08001bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be4:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <HAL_InitTick+0x54>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b12      	ldr	r3, [pc, #72]	@ (8001c34 <HAL_InitTick+0x58>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f967 	bl	8001ece <HAL_SYSTICK_Config>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00e      	b.n	8001c28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b0f      	cmp	r3, #15
 8001c0e:	d80a      	bhi.n	8001c26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c10:	2200      	movs	r2, #0
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295
 8001c18:	f000 f92f 	bl	8001e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c1c:	4a06      	ldr	r2, [pc, #24]	@ (8001c38 <HAL_InitTick+0x5c>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e000      	b.n	8001c28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000000 	.word	0x20000000
 8001c34:	20000008 	.word	0x20000008
 8001c38:	20000004 	.word	0x20000004

08001c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c40:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <HAL_IncTick+0x20>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <HAL_IncTick+0x24>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a04      	ldr	r2, [pc, #16]	@ (8001c60 <HAL_IncTick+0x24>)
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000008 	.word	0x20000008
 8001c60:	2000052c 	.word	0x2000052c

08001c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return uwTick;
 8001c68:	4b03      	ldr	r3, [pc, #12]	@ (8001c78 <HAL_GetTick+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	2000052c 	.word	0x2000052c

08001c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c84:	f7ff ffee 	bl	8001c64 <HAL_GetTick>
 8001c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c94:	d005      	beq.n	8001ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c96:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc0 <HAL_Delay+0x44>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ca2:	bf00      	nop
 8001ca4:	f7ff ffde 	bl	8001c64 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d8f7      	bhi.n	8001ca4 <HAL_Delay+0x28>
  {
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000008 	.word	0x20000008

08001cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf6:	4a04      	ldr	r2, [pc, #16]	@ (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	60d3      	str	r3, [r2, #12]
}
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d10:	4b04      	ldr	r3, [pc, #16]	@ (8001d24 <__NVIC_GetPriorityGrouping+0x18>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	0a1b      	lsrs	r3, r3, #8
 8001d16:	f003 0307 	and.w	r3, r3, #7
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	db0b      	blt.n	8001d52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	f003 021f 	and.w	r2, r3, #31
 8001d40:	4907      	ldr	r1, [pc, #28]	@ (8001d60 <__NVIC_EnableIRQ+0x38>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	2001      	movs	r0, #1
 8001d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000e100 	.word	0xe000e100

08001d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	db0a      	blt.n	8001d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	490c      	ldr	r1, [pc, #48]	@ (8001db0 <__NVIC_SetPriority+0x4c>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	0112      	lsls	r2, r2, #4
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	440b      	add	r3, r1
 8001d88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d8c:	e00a      	b.n	8001da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4908      	ldr	r1, [pc, #32]	@ (8001db4 <__NVIC_SetPriority+0x50>)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	3b04      	subs	r3, #4
 8001d9c:	0112      	lsls	r2, r2, #4
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	440b      	add	r3, r1
 8001da2:	761a      	strb	r2, [r3, #24]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000e100 	.word	0xe000e100
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	@ 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f1c3 0307 	rsb	r3, r3, #7
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	bf28      	it	cs
 8001dd6:	2304      	movcs	r3, #4
 8001dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d902      	bls.n	8001de8 <NVIC_EncodePriority+0x30>
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3b03      	subs	r3, #3
 8001de6:	e000      	b.n	8001dea <NVIC_EncodePriority+0x32>
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	f04f 32ff 	mov.w	r2, #4294967295
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	4313      	orrs	r3, r2
         );
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3724      	adds	r7, #36	@ 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e30:	d301      	bcc.n	8001e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00f      	b.n	8001e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e36:	4a0a      	ldr	r2, [pc, #40]	@ (8001e60 <SysTick_Config+0x40>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3e:	210f      	movs	r1, #15
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	f7ff ff8e 	bl	8001d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e48:	4b05      	ldr	r3, [pc, #20]	@ (8001e60 <SysTick_Config+0x40>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4e:	4b04      	ldr	r3, [pc, #16]	@ (8001e60 <SysTick_Config+0x40>)
 8001e50:	2207      	movs	r2, #7
 8001e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	e000e010 	.word	0xe000e010

08001e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff ff29 	bl	8001cc4 <__NVIC_SetPriorityGrouping>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b086      	sub	sp, #24
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4603      	mov	r3, r0
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e8c:	f7ff ff3e 	bl	8001d0c <__NVIC_GetPriorityGrouping>
 8001e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68b9      	ldr	r1, [r7, #8]
 8001e96:	6978      	ldr	r0, [r7, #20]
 8001e98:	f7ff ff8e 	bl	8001db8 <NVIC_EncodePriority>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff5d 	bl	8001d64 <__NVIC_SetPriority>
}
 8001eaa:	bf00      	nop
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff31 	bl	8001d28 <__NVIC_EnableIRQ>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff ffa2 	bl	8001e20 <SysTick_Config>
 8001edc:	4603      	mov	r3, r0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b089      	sub	sp, #36	@ 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
 8001f02:	e165      	b.n	80021d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f04:	2201      	movs	r2, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	4013      	ands	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	f040 8154 	bne.w	80021ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d005      	beq.n	8001f3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d130      	bne.n	8001f9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	2203      	movs	r2, #3
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f70:	2201      	movs	r2, #1
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	f003 0201 	and.w	r2, r3, #1
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d017      	beq.n	8001fd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d123      	bne.n	800202c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	08da      	lsrs	r2, r3, #3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3208      	adds	r2, #8
 8001fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	220f      	movs	r2, #15
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	08da      	lsrs	r2, r3, #3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3208      	adds	r2, #8
 8002026:	69b9      	ldr	r1, [r7, #24]
 8002028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	2203      	movs	r2, #3
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0203 	and.w	r2, r3, #3
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 80ae 	beq.w	80021ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b5d      	ldr	r3, [pc, #372]	@ (80021e8 <HAL_GPIO_Init+0x300>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002076:	4a5c      	ldr	r2, [pc, #368]	@ (80021e8 <HAL_GPIO_Init+0x300>)
 8002078:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800207c:	6453      	str	r3, [r2, #68]	@ 0x44
 800207e:	4b5a      	ldr	r3, [pc, #360]	@ (80021e8 <HAL_GPIO_Init+0x300>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002082:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800208a:	4a58      	ldr	r2, [pc, #352]	@ (80021ec <HAL_GPIO_Init+0x304>)
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	3302      	adds	r3, #2
 8002092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	220f      	movs	r2, #15
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4f      	ldr	r2, [pc, #316]	@ (80021f0 <HAL_GPIO_Init+0x308>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d025      	beq.n	8002102 <HAL_GPIO_Init+0x21a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a4e      	ldr	r2, [pc, #312]	@ (80021f4 <HAL_GPIO_Init+0x30c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d01f      	beq.n	80020fe <HAL_GPIO_Init+0x216>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4d      	ldr	r2, [pc, #308]	@ (80021f8 <HAL_GPIO_Init+0x310>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d019      	beq.n	80020fa <HAL_GPIO_Init+0x212>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a4c      	ldr	r2, [pc, #304]	@ (80021fc <HAL_GPIO_Init+0x314>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d013      	beq.n	80020f6 <HAL_GPIO_Init+0x20e>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002200 <HAL_GPIO_Init+0x318>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00d      	beq.n	80020f2 <HAL_GPIO_Init+0x20a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4a      	ldr	r2, [pc, #296]	@ (8002204 <HAL_GPIO_Init+0x31c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d007      	beq.n	80020ee <HAL_GPIO_Init+0x206>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a49      	ldr	r2, [pc, #292]	@ (8002208 <HAL_GPIO_Init+0x320>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d101      	bne.n	80020ea <HAL_GPIO_Init+0x202>
 80020e6:	2306      	movs	r3, #6
 80020e8:	e00c      	b.n	8002104 <HAL_GPIO_Init+0x21c>
 80020ea:	2307      	movs	r3, #7
 80020ec:	e00a      	b.n	8002104 <HAL_GPIO_Init+0x21c>
 80020ee:	2305      	movs	r3, #5
 80020f0:	e008      	b.n	8002104 <HAL_GPIO_Init+0x21c>
 80020f2:	2304      	movs	r3, #4
 80020f4:	e006      	b.n	8002104 <HAL_GPIO_Init+0x21c>
 80020f6:	2303      	movs	r3, #3
 80020f8:	e004      	b.n	8002104 <HAL_GPIO_Init+0x21c>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e002      	b.n	8002104 <HAL_GPIO_Init+0x21c>
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <HAL_GPIO_Init+0x21c>
 8002102:	2300      	movs	r3, #0
 8002104:	69fa      	ldr	r2, [r7, #28]
 8002106:	f002 0203 	and.w	r2, r2, #3
 800210a:	0092      	lsls	r2, r2, #2
 800210c:	4093      	lsls	r3, r2
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002114:	4935      	ldr	r1, [pc, #212]	@ (80021ec <HAL_GPIO_Init+0x304>)
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	089b      	lsrs	r3, r3, #2
 800211a:	3302      	adds	r3, #2
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002122:	4b3a      	ldr	r3, [pc, #232]	@ (800220c <HAL_GPIO_Init+0x324>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002146:	4a31      	ldr	r2, [pc, #196]	@ (800220c <HAL_GPIO_Init+0x324>)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800214c:	4b2f      	ldr	r3, [pc, #188]	@ (800220c <HAL_GPIO_Init+0x324>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002170:	4a26      	ldr	r2, [pc, #152]	@ (800220c <HAL_GPIO_Init+0x324>)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002176:	4b25      	ldr	r3, [pc, #148]	@ (800220c <HAL_GPIO_Init+0x324>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800219a:	4a1c      	ldr	r2, [pc, #112]	@ (800220c <HAL_GPIO_Init+0x324>)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021a0:	4b1a      	ldr	r3, [pc, #104]	@ (800220c <HAL_GPIO_Init+0x324>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021c4:	4a11      	ldr	r2, [pc, #68]	@ (800220c <HAL_GPIO_Init+0x324>)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3301      	adds	r3, #1
 80021ce:	61fb      	str	r3, [r7, #28]
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	2b0f      	cmp	r3, #15
 80021d4:	f67f ae96 	bls.w	8001f04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021d8:	bf00      	nop
 80021da:	bf00      	nop
 80021dc:	3724      	adds	r7, #36	@ 0x24
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40013800 	.word	0x40013800
 80021f0:	40020000 	.word	0x40020000
 80021f4:	40020400 	.word	0x40020400
 80021f8:	40020800 	.word	0x40020800
 80021fc:	40020c00 	.word	0x40020c00
 8002200:	40021000 	.word	0x40021000
 8002204:	40021400 	.word	0x40021400
 8002208:	40021800 	.word	0x40021800
 800220c:	40013c00 	.word	0x40013c00

08002210 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	887b      	ldrh	r3, [r7, #2]
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
 800222c:	e001      	b.n	8002232 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800222e:	2300      	movs	r3, #0
 8002230:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002232:	7bfb      	ldrb	r3, [r7, #15]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	807b      	strh	r3, [r7, #2]
 800224c:	4613      	mov	r3, r2
 800224e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002250:	787b      	ldrb	r3, [r7, #1]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002256:	887a      	ldrh	r2, [r7, #2]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800225c:	e003      	b.n	8002266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800225e:	887b      	ldrh	r3, [r7, #2]
 8002260:	041a      	lsls	r2, r3, #16
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	619a      	str	r2, [r3, #24]
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e12b      	b.n	80024de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d106      	bne.n	80022a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7fe fda8 	bl	8000df0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2224      	movs	r2, #36	@ 0x24
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0201 	bic.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022d8:	f000 fe8a 	bl	8002ff0 <HAL_RCC_GetPCLK1Freq>
 80022dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4a81      	ldr	r2, [pc, #516]	@ (80024e8 <HAL_I2C_Init+0x274>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d807      	bhi.n	80022f8 <HAL_I2C_Init+0x84>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4a80      	ldr	r2, [pc, #512]	@ (80024ec <HAL_I2C_Init+0x278>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	bf94      	ite	ls
 80022f0:	2301      	movls	r3, #1
 80022f2:	2300      	movhi	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	e006      	b.n	8002306 <HAL_I2C_Init+0x92>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4a7d      	ldr	r2, [pc, #500]	@ (80024f0 <HAL_I2C_Init+0x27c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	bf94      	ite	ls
 8002300:	2301      	movls	r3, #1
 8002302:	2300      	movhi	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e0e7      	b.n	80024de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4a78      	ldr	r2, [pc, #480]	@ (80024f4 <HAL_I2C_Init+0x280>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	0c9b      	lsrs	r3, r3, #18
 8002318:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	430a      	orrs	r2, r1
 800232c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	4a6a      	ldr	r2, [pc, #424]	@ (80024e8 <HAL_I2C_Init+0x274>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d802      	bhi.n	8002348 <HAL_I2C_Init+0xd4>
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	3301      	adds	r3, #1
 8002346:	e009      	b.n	800235c <HAL_I2C_Init+0xe8>
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800234e:	fb02 f303 	mul.w	r3, r2, r3
 8002352:	4a69      	ldr	r2, [pc, #420]	@ (80024f8 <HAL_I2C_Init+0x284>)
 8002354:	fba2 2303 	umull	r2, r3, r2, r3
 8002358:	099b      	lsrs	r3, r3, #6
 800235a:	3301      	adds	r3, #1
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	430b      	orrs	r3, r1
 8002362:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800236e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	495c      	ldr	r1, [pc, #368]	@ (80024e8 <HAL_I2C_Init+0x274>)
 8002378:	428b      	cmp	r3, r1
 800237a:	d819      	bhi.n	80023b0 <HAL_I2C_Init+0x13c>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	1e59      	subs	r1, r3, #1
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	fbb1 f3f3 	udiv	r3, r1, r3
 800238a:	1c59      	adds	r1, r3, #1
 800238c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002390:	400b      	ands	r3, r1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00a      	beq.n	80023ac <HAL_I2C_Init+0x138>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1e59      	subs	r1, r3, #1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80023a4:	3301      	adds	r3, #1
 80023a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023aa:	e051      	b.n	8002450 <HAL_I2C_Init+0x1dc>
 80023ac:	2304      	movs	r3, #4
 80023ae:	e04f      	b.n	8002450 <HAL_I2C_Init+0x1dc>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d111      	bne.n	80023dc <HAL_I2C_Init+0x168>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1e58      	subs	r0, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6859      	ldr	r1, [r3, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	440b      	add	r3, r1
 80023c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ca:	3301      	adds	r3, #1
 80023cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	bf0c      	ite	eq
 80023d4:	2301      	moveq	r3, #1
 80023d6:	2300      	movne	r3, #0
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	e012      	b.n	8002402 <HAL_I2C_Init+0x18e>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	1e58      	subs	r0, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	0099      	lsls	r1, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f2:	3301      	adds	r3, #1
 80023f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf0c      	ite	eq
 80023fc:	2301      	moveq	r3, #1
 80023fe:	2300      	movne	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_I2C_Init+0x196>
 8002406:	2301      	movs	r3, #1
 8002408:	e022      	b.n	8002450 <HAL_I2C_Init+0x1dc>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10e      	bne.n	8002430 <HAL_I2C_Init+0x1bc>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1e58      	subs	r0, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6859      	ldr	r1, [r3, #4]
 800241a:	460b      	mov	r3, r1
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	440b      	add	r3, r1
 8002420:	fbb0 f3f3 	udiv	r3, r0, r3
 8002424:	3301      	adds	r3, #1
 8002426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800242a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800242e:	e00f      	b.n	8002450 <HAL_I2C_Init+0x1dc>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1e58      	subs	r0, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6859      	ldr	r1, [r3, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	0099      	lsls	r1, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	fbb0 f3f3 	udiv	r3, r0, r3
 8002446:	3301      	adds	r3, #1
 8002448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800244c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	6809      	ldr	r1, [r1, #0]
 8002454:	4313      	orrs	r3, r2
 8002456:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69da      	ldr	r2, [r3, #28]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800247e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6911      	ldr	r1, [r2, #16]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68d2      	ldr	r2, [r2, #12]
 800248a:	4311      	orrs	r1, r2
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	430b      	orrs	r3, r1
 8002492:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695a      	ldr	r2, [r3, #20]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2220      	movs	r2, #32
 80024ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	000186a0 	.word	0x000186a0
 80024ec:	001e847f 	.word	0x001e847f
 80024f0:	003d08ff 	.word	0x003d08ff
 80024f4:	431bde83 	.word	0x431bde83
 80024f8:	10624dd3 	.word	0x10624dd3

080024fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af02      	add	r7, sp, #8
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	461a      	mov	r2, r3
 8002508:	460b      	mov	r3, r1
 800250a:	817b      	strh	r3, [r7, #10]
 800250c:	4613      	mov	r3, r2
 800250e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002510:	f7ff fba8 	bl	8001c64 <HAL_GetTick>
 8002514:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b20      	cmp	r3, #32
 8002520:	f040 80e0 	bne.w	80026e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2319      	movs	r3, #25
 800252a:	2201      	movs	r2, #1
 800252c:	4970      	ldr	r1, [pc, #448]	@ (80026f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 fa92 	bl	8002a58 <I2C_WaitOnFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800253a:	2302      	movs	r3, #2
 800253c:	e0d3      	b.n	80026e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <HAL_I2C_Master_Transmit+0x50>
 8002548:	2302      	movs	r3, #2
 800254a:	e0cc      	b.n	80026e6 <HAL_I2C_Master_Transmit+0x1ea>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b01      	cmp	r3, #1
 8002560:	d007      	beq.n	8002572 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0201 	orr.w	r2, r2, #1
 8002570:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002580:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2221      	movs	r2, #33	@ 0x21
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2210      	movs	r2, #16
 800258e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	893a      	ldrh	r2, [r7, #8]
 80025a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4a50      	ldr	r2, [pc, #320]	@ (80026f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80025b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025b4:	8979      	ldrh	r1, [r7, #10]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	6a3a      	ldr	r2, [r7, #32]
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 f9ca 	bl	8002954 <I2C_MasterRequestWrite>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e08d      	b.n	80026e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025e0:	e066      	b.n	80026b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	6a39      	ldr	r1, [r7, #32]
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 fb50 	bl	8002c8c <I2C_WaitOnTXEFlagUntilTimeout>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00d      	beq.n	800260e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d107      	bne.n	800260a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002608:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e06b      	b.n	80026e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002612:	781a      	ldrb	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b04      	cmp	r3, #4
 800264a:	d11b      	bne.n	8002684 <HAL_I2C_Master_Transmit+0x188>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002650:	2b00      	cmp	r3, #0
 8002652:	d017      	beq.n	8002684 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002658:	781a      	ldrb	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800266e:	b29b      	uxth	r3, r3
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	6a39      	ldr	r1, [r7, #32]
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 fb47 	bl	8002d1c <I2C_WaitOnBTFFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00d      	beq.n	80026b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002698:	2b04      	cmp	r3, #4
 800269a:	d107      	bne.n	80026ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e01a      	b.n	80026e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d194      	bne.n	80025e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	e000      	b.n	80026e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026e4:	2302      	movs	r3, #2
  }
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	00100002 	.word	0x00100002
 80026f4:	ffff0000 	.word	0xffff0000

080026f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	@ 0x28
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	603b      	str	r3, [r7, #0]
 8002704:	460b      	mov	r3, r1
 8002706:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002708:	f7ff faac 	bl	8001c64 <HAL_GetTick>
 800270c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b20      	cmp	r3, #32
 800271c:	f040 8111 	bne.w	8002942 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2319      	movs	r3, #25
 8002726:	2201      	movs	r2, #1
 8002728:	4988      	ldr	r1, [pc, #544]	@ (800294c <HAL_I2C_IsDeviceReady+0x254>)
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 f994 	bl	8002a58 <I2C_WaitOnFlagUntilTimeout>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002736:	2302      	movs	r3, #2
 8002738:	e104      	b.n	8002944 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_I2C_IsDeviceReady+0x50>
 8002744:	2302      	movs	r3, #2
 8002746:	e0fd      	b.n	8002944 <HAL_I2C_IsDeviceReady+0x24c>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b01      	cmp	r3, #1
 800275c:	d007      	beq.n	800276e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 0201 	orr.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800277c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2224      	movs	r2, #36	@ 0x24
 8002782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4a70      	ldr	r2, [pc, #448]	@ (8002950 <HAL_I2C_IsDeviceReady+0x258>)
 8002790:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027a0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 f952 	bl	8002a58 <I2C_WaitOnFlagUntilTimeout>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00d      	beq.n	80027d6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027c8:	d103      	bne.n	80027d2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027d0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e0b6      	b.n	8002944 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027d6:	897b      	ldrh	r3, [r7, #10]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027e4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80027e6:	f7ff fa3d 	bl	8001c64 <HAL_GetTick>
 80027ea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	bf0c      	ite	eq
 80027fa:	2301      	moveq	r3, #1
 80027fc:	2300      	movne	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800280c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002810:	bf0c      	ite	eq
 8002812:	2301      	moveq	r3, #1
 8002814:	2300      	movne	r3, #0
 8002816:	b2db      	uxtb	r3, r3
 8002818:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800281a:	e025      	b.n	8002868 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800281c:	f7ff fa22 	bl	8001c64 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d302      	bcc.n	8002832 <HAL_I2C_IsDeviceReady+0x13a>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d103      	bne.n	800283a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	22a0      	movs	r2, #160	@ 0xa0
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b02      	cmp	r3, #2
 8002846:	bf0c      	ite	eq
 8002848:	2301      	moveq	r3, #1
 800284a:	2300      	movne	r3, #0
 800284c:	b2db      	uxtb	r3, r3
 800284e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800285a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800285e:	bf0c      	ite	eq
 8002860:	2301      	moveq	r3, #1
 8002862:	2300      	movne	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2ba0      	cmp	r3, #160	@ 0xa0
 8002872:	d005      	beq.n	8002880 <HAL_I2C_IsDeviceReady+0x188>
 8002874:	7dfb      	ldrb	r3, [r7, #23]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d102      	bne.n	8002880 <HAL_I2C_IsDeviceReady+0x188>
 800287a:	7dbb      	ldrb	r3, [r7, #22]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0cd      	beq.n	800281c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b02      	cmp	r3, #2
 8002894:	d129      	bne.n	80028ea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028a4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	2319      	movs	r3, #25
 80028c2:	2201      	movs	r2, #1
 80028c4:	4921      	ldr	r1, [pc, #132]	@ (800294c <HAL_I2C_IsDeviceReady+0x254>)
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 f8c6 	bl	8002a58 <I2C_WaitOnFlagUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e036      	b.n	8002944 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2220      	movs	r2, #32
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	e02c      	b.n	8002944 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028f8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002902:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	2319      	movs	r3, #25
 800290a:	2201      	movs	r2, #1
 800290c:	490f      	ldr	r1, [pc, #60]	@ (800294c <HAL_I2C_IsDeviceReady+0x254>)
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f8a2 	bl	8002a58 <I2C_WaitOnFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e012      	b.n	8002944 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	3301      	adds	r3, #1
 8002922:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	429a      	cmp	r2, r3
 800292a:	f4ff af32 	bcc.w	8002792 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002942:	2302      	movs	r3, #2
  }
}
 8002944:	4618      	mov	r0, r3
 8002946:	3720      	adds	r7, #32
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	00100002 	.word	0x00100002
 8002950:	ffff0000 	.word	0xffff0000

08002954 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af02      	add	r7, sp, #8
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	603b      	str	r3, [r7, #0]
 8002960:	460b      	mov	r3, r1
 8002962:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002968:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2b08      	cmp	r3, #8
 800296e:	d006      	beq.n	800297e <I2C_MasterRequestWrite+0x2a>
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d003      	beq.n	800297e <I2C_MasterRequestWrite+0x2a>
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800297c:	d108      	bne.n	8002990 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	e00b      	b.n	80029a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002994:	2b12      	cmp	r3, #18
 8002996:	d107      	bne.n	80029a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f84f 	bl	8002a58 <I2C_WaitOnFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00d      	beq.n	80029dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029ce:	d103      	bne.n	80029d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e035      	b.n	8002a48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029e4:	d108      	bne.n	80029f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029e6:	897b      	ldrh	r3, [r7, #10]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	461a      	mov	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029f4:	611a      	str	r2, [r3, #16]
 80029f6:	e01b      	b.n	8002a30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029f8:	897b      	ldrh	r3, [r7, #10]
 80029fa:	11db      	asrs	r3, r3, #7
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	f003 0306 	and.w	r3, r3, #6
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	f063 030f 	orn	r3, r3, #15
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	490e      	ldr	r1, [pc, #56]	@ (8002a50 <I2C_MasterRequestWrite+0xfc>)
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 f898 	bl	8002b4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e010      	b.n	8002a48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a26:	897b      	ldrh	r3, [r7, #10]
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	4907      	ldr	r1, [pc, #28]	@ (8002a54 <I2C_MasterRequestWrite+0x100>)
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f888 	bl	8002b4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	00010008 	.word	0x00010008
 8002a54:	00010002 	.word	0x00010002

08002a58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	4613      	mov	r3, r2
 8002a66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a68:	e048      	b.n	8002afc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a70:	d044      	beq.n	8002afc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a72:	f7ff f8f7 	bl	8001c64 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d302      	bcc.n	8002a88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d139      	bne.n	8002afc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	0c1b      	lsrs	r3, r3, #16
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d10d      	bne.n	8002aae <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	43da      	mvns	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf0c      	ite	eq
 8002aa4:	2301      	moveq	r3, #1
 8002aa6:	2300      	movne	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	e00c      	b.n	8002ac8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	43da      	mvns	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf0c      	ite	eq
 8002ac0:	2301      	moveq	r3, #1
 8002ac2:	2300      	movne	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d116      	bne.n	8002afc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	f043 0220 	orr.w	r2, r3, #32
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e023      	b.n	8002b44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	0c1b      	lsrs	r3, r3, #16
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d10d      	bne.n	8002b22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	43da      	mvns	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	4013      	ands	r3, r2
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	bf0c      	ite	eq
 8002b18:	2301      	moveq	r3, #1
 8002b1a:	2300      	movne	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	461a      	mov	r2, r3
 8002b20:	e00c      	b.n	8002b3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	43da      	mvns	r2, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d093      	beq.n	8002a6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
 8002b58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b5a:	e071      	b.n	8002c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b6a:	d123      	bne.n	8002bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba0:	f043 0204 	orr.w	r2, r3, #4
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e067      	b.n	8002c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bba:	d041      	beq.n	8002c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bbc:	f7ff f852 	bl	8001c64 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d302      	bcc.n	8002bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d136      	bne.n	8002c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	0c1b      	lsrs	r3, r3, #16
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d10c      	bne.n	8002bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	43da      	mvns	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4013      	ands	r3, r2
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	bf14      	ite	ne
 8002bee:	2301      	movne	r3, #1
 8002bf0:	2300      	moveq	r3, #0
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	e00b      	b.n	8002c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	43da      	mvns	r2, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	4013      	ands	r3, r2
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	bf14      	ite	ne
 8002c08:	2301      	movne	r3, #1
 8002c0a:	2300      	moveq	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d016      	beq.n	8002c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2c:	f043 0220 	orr.w	r2, r3, #32
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e021      	b.n	8002c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	0c1b      	lsrs	r3, r3, #16
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d10c      	bne.n	8002c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	43da      	mvns	r2, r3
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	4013      	ands	r3, r2
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	bf14      	ite	ne
 8002c5c:	2301      	movne	r3, #1
 8002c5e:	2300      	moveq	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	e00b      	b.n	8002c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	bf14      	ite	ne
 8002c76:	2301      	movne	r3, #1
 8002c78:	2300      	moveq	r3, #0
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f47f af6d 	bne.w	8002b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c98:	e034      	b.n	8002d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f886 	bl	8002dac <I2C_IsAcknowledgeFailed>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e034      	b.n	8002d14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb0:	d028      	beq.n	8002d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb2:	f7fe ffd7 	bl	8001c64 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d302      	bcc.n	8002cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d11d      	bne.n	8002d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd2:	2b80      	cmp	r3, #128	@ 0x80
 8002cd4:	d016      	beq.n	8002d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf0:	f043 0220 	orr.w	r2, r3, #32
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e007      	b.n	8002d14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d0e:	2b80      	cmp	r3, #128	@ 0x80
 8002d10:	d1c3      	bne.n	8002c9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d28:	e034      	b.n	8002d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 f83e 	bl	8002dac <I2C_IsAcknowledgeFailed>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e034      	b.n	8002da4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d40:	d028      	beq.n	8002d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d42:	f7fe ff8f 	bl	8001c64 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d302      	bcc.n	8002d58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d11d      	bne.n	8002d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d016      	beq.n	8002d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d80:	f043 0220 	orr.w	r2, r3, #32
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e007      	b.n	8002da4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d1c3      	bne.n	8002d2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dc2:	d11b      	bne.n	8002dfc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dcc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de8:	f043 0204 	orr.w	r2, r3, #4
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e000      	b.n	8002dfe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
	...

08002e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0cc      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e20:	4b68      	ldr	r3, [pc, #416]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d90c      	bls.n	8002e48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2e:	4b65      	ldr	r3, [pc, #404]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e36:	4b63      	ldr	r3, [pc, #396]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0b8      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d020      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e60:	4b59      	ldr	r3, [pc, #356]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	4a58      	ldr	r2, [pc, #352]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e78:	4b53      	ldr	r3, [pc, #332]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	4a52      	ldr	r2, [pc, #328]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e84:	4b50      	ldr	r3, [pc, #320]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	494d      	ldr	r1, [pc, #308]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d044      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d107      	bne.n	8002eba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eaa:	4b47      	ldr	r3, [pc, #284]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d119      	bne.n	8002eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e07f      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d003      	beq.n	8002eca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d107      	bne.n	8002eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eca:	4b3f      	ldr	r3, [pc, #252]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d109      	bne.n	8002eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e06f      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eda:	4b3b      	ldr	r3, [pc, #236]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e067      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eea:	4b37      	ldr	r3, [pc, #220]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f023 0203 	bic.w	r2, r3, #3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4934      	ldr	r1, [pc, #208]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002efc:	f7fe feb2 	bl	8001c64 <HAL_GetTick>
 8002f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f02:	e00a      	b.n	8002f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f04:	f7fe feae 	bl	8001c64 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e04f      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 020c 	and.w	r2, r3, #12
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d1eb      	bne.n	8002f04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f2c:	4b25      	ldr	r3, [pc, #148]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 030f 	and.w	r3, r3, #15
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d20c      	bcs.n	8002f54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3a:	4b22      	ldr	r3, [pc, #136]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f42:	4b20      	ldr	r3, [pc, #128]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e032      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f60:	4b19      	ldr	r3, [pc, #100]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4916      	ldr	r1, [pc, #88]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f7e:	4b12      	ldr	r3, [pc, #72]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	490e      	ldr	r1, [pc, #56]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f92:	f000 f841 	bl	8003018 <HAL_RCC_GetSysClockFreq>
 8002f96:	4602      	mov	r2, r0
 8002f98:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	490a      	ldr	r1, [pc, #40]	@ (8002fcc <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	5ccb      	ldrb	r3, [r1, r3]
 8002fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8002faa:	4a09      	ldr	r2, [pc, #36]	@ (8002fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002fae:	4b09      	ldr	r3, [pc, #36]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fe fe12 	bl	8001bdc <HAL_InitTick>

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40023c00 	.word	0x40023c00
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	08005824 	.word	0x08005824
 8002fd0:	20000000 	.word	0x20000000
 8002fd4:	20000004 	.word	0x20000004

08002fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fdc:	4b03      	ldr	r3, [pc, #12]	@ (8002fec <HAL_RCC_GetHCLKFreq+0x14>)
 8002fde:	681b      	ldr	r3, [r3, #0]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	20000000 	.word	0x20000000

08002ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ff4:	f7ff fff0 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	4b05      	ldr	r3, [pc, #20]	@ (8003010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	0a9b      	lsrs	r3, r3, #10
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	4903      	ldr	r1, [pc, #12]	@ (8003014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003006:	5ccb      	ldrb	r3, [r1, r3]
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800300c:	4618      	mov	r0, r3
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40023800 	.word	0x40023800
 8003014:	08005834 	.word	0x08005834

08003018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800301c:	b0a6      	sub	sp, #152	@ 0x98
 800301e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800303e:	4bc8      	ldr	r3, [pc, #800]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x348>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b0c      	cmp	r3, #12
 8003048:	f200 817e 	bhi.w	8003348 <HAL_RCC_GetSysClockFreq+0x330>
 800304c:	a201      	add	r2, pc, #4	@ (adr r2, 8003054 <HAL_RCC_GetSysClockFreq+0x3c>)
 800304e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003052:	bf00      	nop
 8003054:	08003089 	.word	0x08003089
 8003058:	08003349 	.word	0x08003349
 800305c:	08003349 	.word	0x08003349
 8003060:	08003349 	.word	0x08003349
 8003064:	08003091 	.word	0x08003091
 8003068:	08003349 	.word	0x08003349
 800306c:	08003349 	.word	0x08003349
 8003070:	08003349 	.word	0x08003349
 8003074:	08003099 	.word	0x08003099
 8003078:	08003349 	.word	0x08003349
 800307c:	08003349 	.word	0x08003349
 8003080:	08003349 	.word	0x08003349
 8003084:	08003203 	.word	0x08003203
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003088:	4bb6      	ldr	r3, [pc, #728]	@ (8003364 <HAL_RCC_GetSysClockFreq+0x34c>)
 800308a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800308e:	e15f      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003090:	4bb5      	ldr	r3, [pc, #724]	@ (8003368 <HAL_RCC_GetSysClockFreq+0x350>)
 8003092:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003096:	e15b      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003098:	4bb1      	ldr	r3, [pc, #708]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x348>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030a4:	4bae      	ldr	r3, [pc, #696]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x348>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d031      	beq.n	8003114 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b0:	4bab      	ldr	r3, [pc, #684]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x348>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	099b      	lsrs	r3, r3, #6
 80030b6:	2200      	movs	r2, #0
 80030b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80030bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80030c4:	2300      	movs	r3, #0
 80030c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80030c8:	4ba7      	ldr	r3, [pc, #668]	@ (8003368 <HAL_RCC_GetSysClockFreq+0x350>)
 80030ca:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80030ce:	462a      	mov	r2, r5
 80030d0:	fb03 f202 	mul.w	r2, r3, r2
 80030d4:	2300      	movs	r3, #0
 80030d6:	4621      	mov	r1, r4
 80030d8:	fb01 f303 	mul.w	r3, r1, r3
 80030dc:	4413      	add	r3, r2
 80030de:	4aa2      	ldr	r2, [pc, #648]	@ (8003368 <HAL_RCC_GetSysClockFreq+0x350>)
 80030e0:	4621      	mov	r1, r4
 80030e2:	fba1 1202 	umull	r1, r2, r1, r2
 80030e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80030e8:	460a      	mov	r2, r1
 80030ea:	67ba      	str	r2, [r7, #120]	@ 0x78
 80030ec:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80030ee:	4413      	add	r3, r2
 80030f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80030f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030f6:	2200      	movs	r2, #0
 80030f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80030fa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80030fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003100:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003104:	f7fd fc6e 	bl	80009e4 <__aeabi_uldivmod>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4613      	mov	r3, r2
 800310e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003112:	e064      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003114:	4b92      	ldr	r3, [pc, #584]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x348>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	099b      	lsrs	r3, r3, #6
 800311a:	2200      	movs	r2, #0
 800311c:	653b      	str	r3, [r7, #80]	@ 0x50
 800311e:	657a      	str	r2, [r7, #84]	@ 0x54
 8003120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003126:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003128:	2300      	movs	r3, #0
 800312a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800312c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003130:	4622      	mov	r2, r4
 8003132:	462b      	mov	r3, r5
 8003134:	f04f 0000 	mov.w	r0, #0
 8003138:	f04f 0100 	mov.w	r1, #0
 800313c:	0159      	lsls	r1, r3, #5
 800313e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003142:	0150      	lsls	r0, r2, #5
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4621      	mov	r1, r4
 800314a:	1a51      	subs	r1, r2, r1
 800314c:	6139      	str	r1, [r7, #16]
 800314e:	4629      	mov	r1, r5
 8003150:	eb63 0301 	sbc.w	r3, r3, r1
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	f04f 0200 	mov.w	r2, #0
 800315a:	f04f 0300 	mov.w	r3, #0
 800315e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003162:	4659      	mov	r1, fp
 8003164:	018b      	lsls	r3, r1, #6
 8003166:	4651      	mov	r1, sl
 8003168:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800316c:	4651      	mov	r1, sl
 800316e:	018a      	lsls	r2, r1, #6
 8003170:	4651      	mov	r1, sl
 8003172:	ebb2 0801 	subs.w	r8, r2, r1
 8003176:	4659      	mov	r1, fp
 8003178:	eb63 0901 	sbc.w	r9, r3, r1
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003188:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800318c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003190:	4690      	mov	r8, r2
 8003192:	4699      	mov	r9, r3
 8003194:	4623      	mov	r3, r4
 8003196:	eb18 0303 	adds.w	r3, r8, r3
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	462b      	mov	r3, r5
 800319e:	eb49 0303 	adc.w	r3, r9, r3
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031b0:	4629      	mov	r1, r5
 80031b2:	028b      	lsls	r3, r1, #10
 80031b4:	4621      	mov	r1, r4
 80031b6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031ba:	4621      	mov	r1, r4
 80031bc:	028a      	lsls	r2, r1, #10
 80031be:	4610      	mov	r0, r2
 80031c0:	4619      	mov	r1, r3
 80031c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031c6:	2200      	movs	r2, #0
 80031c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80031ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80031cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80031d0:	f7fd fc08 	bl	80009e4 <__aeabi_uldivmod>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4613      	mov	r3, r2
 80031da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80031de:	4b60      	ldr	r3, [pc, #384]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x348>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	0c1b      	lsrs	r3, r3, #16
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	3301      	adds	r3, #1
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80031f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80031f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003200:	e0a6      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003202:	4b57      	ldr	r3, [pc, #348]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x348>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800320a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800320e:	4b54      	ldr	r3, [pc, #336]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x348>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d02a      	beq.n	8003270 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800321a:	4b51      	ldr	r3, [pc, #324]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x348>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	099b      	lsrs	r3, r3, #6
 8003220:	2200      	movs	r2, #0
 8003222:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003224:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003228:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800322c:	2100      	movs	r1, #0
 800322e:	4b4e      	ldr	r3, [pc, #312]	@ (8003368 <HAL_RCC_GetSysClockFreq+0x350>)
 8003230:	fb03 f201 	mul.w	r2, r3, r1
 8003234:	2300      	movs	r3, #0
 8003236:	fb00 f303 	mul.w	r3, r0, r3
 800323a:	4413      	add	r3, r2
 800323c:	4a4a      	ldr	r2, [pc, #296]	@ (8003368 <HAL_RCC_GetSysClockFreq+0x350>)
 800323e:	fba0 1202 	umull	r1, r2, r0, r2
 8003242:	677a      	str	r2, [r7, #116]	@ 0x74
 8003244:	460a      	mov	r2, r1
 8003246:	673a      	str	r2, [r7, #112]	@ 0x70
 8003248:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800324a:	4413      	add	r3, r2
 800324c:	677b      	str	r3, [r7, #116]	@ 0x74
 800324e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003252:	2200      	movs	r2, #0
 8003254:	633b      	str	r3, [r7, #48]	@ 0x30
 8003256:	637a      	str	r2, [r7, #52]	@ 0x34
 8003258:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800325c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003260:	f7fd fbc0 	bl	80009e4 <__aeabi_uldivmod>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4613      	mov	r3, r2
 800326a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800326e:	e05b      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003270:	4b3b      	ldr	r3, [pc, #236]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x348>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	099b      	lsrs	r3, r3, #6
 8003276:	2200      	movs	r2, #0
 8003278:	62bb      	str	r3, [r7, #40]	@ 0x28
 800327a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800327c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800327e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003282:	623b      	str	r3, [r7, #32]
 8003284:	2300      	movs	r3, #0
 8003286:	627b      	str	r3, [r7, #36]	@ 0x24
 8003288:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800328c:	4642      	mov	r2, r8
 800328e:	464b      	mov	r3, r9
 8003290:	f04f 0000 	mov.w	r0, #0
 8003294:	f04f 0100 	mov.w	r1, #0
 8003298:	0159      	lsls	r1, r3, #5
 800329a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800329e:	0150      	lsls	r0, r2, #5
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4641      	mov	r1, r8
 80032a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80032aa:	4649      	mov	r1, r9
 80032ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032c4:	ebb2 040a 	subs.w	r4, r2, sl
 80032c8:	eb63 050b 	sbc.w	r5, r3, fp
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	00eb      	lsls	r3, r5, #3
 80032d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032da:	00e2      	lsls	r2, r4, #3
 80032dc:	4614      	mov	r4, r2
 80032de:	461d      	mov	r5, r3
 80032e0:	4643      	mov	r3, r8
 80032e2:	18e3      	adds	r3, r4, r3
 80032e4:	603b      	str	r3, [r7, #0]
 80032e6:	464b      	mov	r3, r9
 80032e8:	eb45 0303 	adc.w	r3, r5, r3
 80032ec:	607b      	str	r3, [r7, #4]
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032fa:	4629      	mov	r1, r5
 80032fc:	028b      	lsls	r3, r1, #10
 80032fe:	4621      	mov	r1, r4
 8003300:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003304:	4621      	mov	r1, r4
 8003306:	028a      	lsls	r2, r1, #10
 8003308:	4610      	mov	r0, r2
 800330a:	4619      	mov	r1, r3
 800330c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003310:	2200      	movs	r2, #0
 8003312:	61bb      	str	r3, [r7, #24]
 8003314:	61fa      	str	r2, [r7, #28]
 8003316:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800331a:	f7fd fb63 	bl	80009e4 <__aeabi_uldivmod>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4613      	mov	r3, r2
 8003324:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003328:	4b0d      	ldr	r3, [pc, #52]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x348>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	0f1b      	lsrs	r3, r3, #28
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003336:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800333a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800333e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003342:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003346:	e003      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003348:	4b06      	ldr	r3, [pc, #24]	@ (8003364 <HAL_RCC_GetSysClockFreq+0x34c>)
 800334a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800334e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003350:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003354:	4618      	mov	r0, r3
 8003356:	3798      	adds	r7, #152	@ 0x98
 8003358:	46bd      	mov	sp, r7
 800335a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800335e:	bf00      	nop
 8003360:	40023800 	.word	0x40023800
 8003364:	00f42400 	.word	0x00f42400
 8003368:	017d7840 	.word	0x017d7840

0800336c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e28d      	b.n	800389a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 8083 	beq.w	8003492 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800338c:	4b94      	ldr	r3, [pc, #592]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 030c 	and.w	r3, r3, #12
 8003394:	2b04      	cmp	r3, #4
 8003396:	d019      	beq.n	80033cc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003398:	4b91      	ldr	r3, [pc, #580]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 030c 	and.w	r3, r3, #12
        || \
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d106      	bne.n	80033b2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80033a4:	4b8e      	ldr	r3, [pc, #568]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033b0:	d00c      	beq.n	80033cc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033b2:	4b8b      	ldr	r3, [pc, #556]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80033ba:	2b0c      	cmp	r3, #12
 80033bc:	d112      	bne.n	80033e4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033be:	4b88      	ldr	r3, [pc, #544]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033ca:	d10b      	bne.n	80033e4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033cc:	4b84      	ldr	r3, [pc, #528]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d05b      	beq.n	8003490 <HAL_RCC_OscConfig+0x124>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d157      	bne.n	8003490 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e25a      	b.n	800389a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ec:	d106      	bne.n	80033fc <HAL_RCC_OscConfig+0x90>
 80033ee:	4b7c      	ldr	r3, [pc, #496]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a7b      	ldr	r2, [pc, #492]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 80033f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e01d      	b.n	8003438 <HAL_RCC_OscConfig+0xcc>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003404:	d10c      	bne.n	8003420 <HAL_RCC_OscConfig+0xb4>
 8003406:	4b76      	ldr	r3, [pc, #472]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a75      	ldr	r2, [pc, #468]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 800340c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	4b73      	ldr	r3, [pc, #460]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a72      	ldr	r2, [pc, #456]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 8003418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e00b      	b.n	8003438 <HAL_RCC_OscConfig+0xcc>
 8003420:	4b6f      	ldr	r3, [pc, #444]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a6e      	ldr	r2, [pc, #440]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 8003426:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	4b6c      	ldr	r3, [pc, #432]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a6b      	ldr	r2, [pc, #428]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 8003432:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d013      	beq.n	8003468 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fe fc10 	bl	8001c64 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003448:	f7fe fc0c 	bl	8001c64 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b64      	cmp	r3, #100	@ 0x64
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e21f      	b.n	800389a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	4b61      	ldr	r3, [pc, #388]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0xdc>
 8003466:	e014      	b.n	8003492 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fe fbfc 	bl	8001c64 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003470:	f7fe fbf8 	bl	8001c64 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b64      	cmp	r3, #100	@ 0x64
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e20b      	b.n	800389a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003482:	4b57      	ldr	r3, [pc, #348]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x104>
 800348e:	e000      	b.n	8003492 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d06f      	beq.n	800357e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800349e:	4b50      	ldr	r3, [pc, #320]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 030c 	and.w	r3, r3, #12
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d017      	beq.n	80034da <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80034aa:	4b4d      	ldr	r3, [pc, #308]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
        || \
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d105      	bne.n	80034c2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80034b6:	4b4a      	ldr	r3, [pc, #296]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00b      	beq.n	80034da <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034c2:	4b47      	ldr	r3, [pc, #284]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80034ca:	2b0c      	cmp	r3, #12
 80034cc:	d11c      	bne.n	8003508 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ce:	4b44      	ldr	r3, [pc, #272]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d116      	bne.n	8003508 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034da:	4b41      	ldr	r3, [pc, #260]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <HAL_RCC_OscConfig+0x186>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d001      	beq.n	80034f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e1d3      	b.n	800389a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f2:	4b3b      	ldr	r3, [pc, #236]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4937      	ldr	r1, [pc, #220]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 8003502:	4313      	orrs	r3, r2
 8003504:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003506:	e03a      	b.n	800357e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d020      	beq.n	8003552 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003510:	4b34      	ldr	r3, [pc, #208]	@ (80035e4 <HAL_RCC_OscConfig+0x278>)
 8003512:	2201      	movs	r2, #1
 8003514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003516:	f7fe fba5 	bl	8001c64 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800351e:	f7fe fba1 	bl	8001c64 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e1b4      	b.n	800389a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003530:	4b2b      	ldr	r3, [pc, #172]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0f0      	beq.n	800351e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353c:	4b28      	ldr	r3, [pc, #160]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	4925      	ldr	r1, [pc, #148]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 800354c:	4313      	orrs	r3, r2
 800354e:	600b      	str	r3, [r1, #0]
 8003550:	e015      	b.n	800357e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003552:	4b24      	ldr	r3, [pc, #144]	@ (80035e4 <HAL_RCC_OscConfig+0x278>)
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003558:	f7fe fb84 	bl	8001c64 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003560:	f7fe fb80 	bl	8001c64 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e193      	b.n	800389a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003572:	4b1b      	ldr	r3, [pc, #108]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f0      	bne.n	8003560 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d036      	beq.n	80035f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d016      	beq.n	80035c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003592:	4b15      	ldr	r3, [pc, #84]	@ (80035e8 <HAL_RCC_OscConfig+0x27c>)
 8003594:	2201      	movs	r2, #1
 8003596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003598:	f7fe fb64 	bl	8001c64 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a0:	f7fe fb60 	bl	8001c64 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e173      	b.n	800389a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035b2:	4b0b      	ldr	r3, [pc, #44]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 80035b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0x234>
 80035be:	e01b      	b.n	80035f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c0:	4b09      	ldr	r3, [pc, #36]	@ (80035e8 <HAL_RCC_OscConfig+0x27c>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c6:	f7fe fb4d 	bl	8001c64 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035cc:	e00e      	b.n	80035ec <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ce:	f7fe fb49 	bl	8001c64 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d907      	bls.n	80035ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e15c      	b.n	800389a <HAL_RCC_OscConfig+0x52e>
 80035e0:	40023800 	.word	0x40023800
 80035e4:	42470000 	.word	0x42470000
 80035e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ec:	4b8a      	ldr	r3, [pc, #552]	@ (8003818 <HAL_RCC_OscConfig+0x4ac>)
 80035ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1ea      	bne.n	80035ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 8097 	beq.w	8003734 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003606:	2300      	movs	r3, #0
 8003608:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800360a:	4b83      	ldr	r3, [pc, #524]	@ (8003818 <HAL_RCC_OscConfig+0x4ac>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10f      	bne.n	8003636 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003616:	2300      	movs	r3, #0
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	4b7f      	ldr	r3, [pc, #508]	@ (8003818 <HAL_RCC_OscConfig+0x4ac>)
 800361c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361e:	4a7e      	ldr	r2, [pc, #504]	@ (8003818 <HAL_RCC_OscConfig+0x4ac>)
 8003620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003624:	6413      	str	r3, [r2, #64]	@ 0x40
 8003626:	4b7c      	ldr	r3, [pc, #496]	@ (8003818 <HAL_RCC_OscConfig+0x4ac>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003632:	2301      	movs	r3, #1
 8003634:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003636:	4b79      	ldr	r3, [pc, #484]	@ (800381c <HAL_RCC_OscConfig+0x4b0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800363e:	2b00      	cmp	r3, #0
 8003640:	d118      	bne.n	8003674 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003642:	4b76      	ldr	r3, [pc, #472]	@ (800381c <HAL_RCC_OscConfig+0x4b0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a75      	ldr	r2, [pc, #468]	@ (800381c <HAL_RCC_OscConfig+0x4b0>)
 8003648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800364c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800364e:	f7fe fb09 	bl	8001c64 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003656:	f7fe fb05 	bl	8001c64 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e118      	b.n	800389a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003668:	4b6c      	ldr	r3, [pc, #432]	@ (800381c <HAL_RCC_OscConfig+0x4b0>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d106      	bne.n	800368a <HAL_RCC_OscConfig+0x31e>
 800367c:	4b66      	ldr	r3, [pc, #408]	@ (8003818 <HAL_RCC_OscConfig+0x4ac>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003680:	4a65      	ldr	r2, [pc, #404]	@ (8003818 <HAL_RCC_OscConfig+0x4ac>)
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	6713      	str	r3, [r2, #112]	@ 0x70
 8003688:	e01c      	b.n	80036c4 <HAL_RCC_OscConfig+0x358>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b05      	cmp	r3, #5
 8003690:	d10c      	bne.n	80036ac <HAL_RCC_OscConfig+0x340>
 8003692:	4b61      	ldr	r3, [pc, #388]	@ (8003818 <HAL_RCC_OscConfig+0x4ac>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003696:	4a60      	ldr	r2, [pc, #384]	@ (8003818 <HAL_RCC_OscConfig+0x4ac>)
 8003698:	f043 0304 	orr.w	r3, r3, #4
 800369c:	6713      	str	r3, [r2, #112]	@ 0x70
 800369e:	4b5e      	ldr	r3, [pc, #376]	@ (8003818 <HAL_RCC_OscConfig+0x4ac>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a2:	4a5d      	ldr	r2, [pc, #372]	@ (8003818 <HAL_RCC_OscConfig+0x4ac>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80036aa:	e00b      	b.n	80036c4 <HAL_RCC_OscConfig+0x358>
 80036ac:	4b5a      	ldr	r3, [pc, #360]	@ (8003818 <HAL_RCC_OscConfig+0x4ac>)
 80036ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b0:	4a59      	ldr	r2, [pc, #356]	@ (8003818 <HAL_RCC_OscConfig+0x4ac>)
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036b8:	4b57      	ldr	r3, [pc, #348]	@ (8003818 <HAL_RCC_OscConfig+0x4ac>)
 80036ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036bc:	4a56      	ldr	r2, [pc, #344]	@ (8003818 <HAL_RCC_OscConfig+0x4ac>)
 80036be:	f023 0304 	bic.w	r3, r3, #4
 80036c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d015      	beq.n	80036f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036cc:	f7fe faca 	bl	8001c64 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d2:	e00a      	b.n	80036ea <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d4:	f7fe fac6 	bl	8001c64 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e0d7      	b.n	800389a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ea:	4b4b      	ldr	r3, [pc, #300]	@ (8003818 <HAL_RCC_OscConfig+0x4ac>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0ee      	beq.n	80036d4 <HAL_RCC_OscConfig+0x368>
 80036f6:	e014      	b.n	8003722 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f8:	f7fe fab4 	bl	8001c64 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036fe:	e00a      	b.n	8003716 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003700:	f7fe fab0 	bl	8001c64 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e0c1      	b.n	800389a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003716:	4b40      	ldr	r3, [pc, #256]	@ (8003818 <HAL_RCC_OscConfig+0x4ac>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1ee      	bne.n	8003700 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003722:	7dfb      	ldrb	r3, [r7, #23]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d105      	bne.n	8003734 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003728:	4b3b      	ldr	r3, [pc, #236]	@ (8003818 <HAL_RCC_OscConfig+0x4ac>)
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	4a3a      	ldr	r2, [pc, #232]	@ (8003818 <HAL_RCC_OscConfig+0x4ac>)
 800372e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003732:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80ad 	beq.w	8003898 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800373e:	4b36      	ldr	r3, [pc, #216]	@ (8003818 <HAL_RCC_OscConfig+0x4ac>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	2b08      	cmp	r3, #8
 8003748:	d060      	beq.n	800380c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d145      	bne.n	80037de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003752:	4b33      	ldr	r3, [pc, #204]	@ (8003820 <HAL_RCC_OscConfig+0x4b4>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003758:	f7fe fa84 	bl	8001c64 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003760:	f7fe fa80 	bl	8001c64 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e093      	b.n	800389a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003772:	4b29      	ldr	r3, [pc, #164]	@ (8003818 <HAL_RCC_OscConfig+0x4ac>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69da      	ldr	r2, [r3, #28]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378c:	019b      	lsls	r3, r3, #6
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003794:	085b      	lsrs	r3, r3, #1
 8003796:	3b01      	subs	r3, #1
 8003798:	041b      	lsls	r3, r3, #16
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a0:	061b      	lsls	r3, r3, #24
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a8:	071b      	lsls	r3, r3, #28
 80037aa:	491b      	ldr	r1, [pc, #108]	@ (8003818 <HAL_RCC_OscConfig+0x4ac>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003820 <HAL_RCC_OscConfig+0x4b4>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b6:	f7fe fa55 	bl	8001c64 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037be:	f7fe fa51 	bl	8001c64 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e064      	b.n	800389a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d0:	4b11      	ldr	r3, [pc, #68]	@ (8003818 <HAL_RCC_OscConfig+0x4ac>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f0      	beq.n	80037be <HAL_RCC_OscConfig+0x452>
 80037dc:	e05c      	b.n	8003898 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037de:	4b10      	ldr	r3, [pc, #64]	@ (8003820 <HAL_RCC_OscConfig+0x4b4>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e4:	f7fe fa3e 	bl	8001c64 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fe fa3a 	bl	8001c64 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e04d      	b.n	800389a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fe:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <HAL_RCC_OscConfig+0x4ac>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x480>
 800380a:	e045      	b.n	8003898 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d107      	bne.n	8003824 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e040      	b.n	800389a <HAL_RCC_OscConfig+0x52e>
 8003818:	40023800 	.word	0x40023800
 800381c:	40007000 	.word	0x40007000
 8003820:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003824:	4b1f      	ldr	r3, [pc, #124]	@ (80038a4 <HAL_RCC_OscConfig+0x538>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d030      	beq.n	8003894 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d129      	bne.n	8003894 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d122      	bne.n	8003894 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003854:	4013      	ands	r3, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800385a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800385c:	4293      	cmp	r3, r2
 800385e:	d119      	bne.n	8003894 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386a:	085b      	lsrs	r3, r3, #1
 800386c:	3b01      	subs	r3, #1
 800386e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003870:	429a      	cmp	r2, r3
 8003872:	d10f      	bne.n	8003894 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003880:	429a      	cmp	r2, r3
 8003882:	d107      	bne.n	8003894 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003890:	429a      	cmp	r2, r3
 8003892:	d001      	beq.n	8003898 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e000      	b.n	800389a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40023800 	.word	0x40023800

080038a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e041      	b.n	800393e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fe f8e0 	bl	8001a94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3304      	adds	r3, #4
 80038e4:	4619      	mov	r1, r3
 80038e6:	4610      	mov	r0, r2
 80038e8:	f000 fd28 	bl	800433c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d109      	bne.n	800396c <HAL_TIM_PWM_Start+0x24>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	bf14      	ite	ne
 8003964:	2301      	movne	r3, #1
 8003966:	2300      	moveq	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	e022      	b.n	80039b2 <HAL_TIM_PWM_Start+0x6a>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2b04      	cmp	r3, #4
 8003970:	d109      	bne.n	8003986 <HAL_TIM_PWM_Start+0x3e>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b01      	cmp	r3, #1
 800397c:	bf14      	ite	ne
 800397e:	2301      	movne	r3, #1
 8003980:	2300      	moveq	r3, #0
 8003982:	b2db      	uxtb	r3, r3
 8003984:	e015      	b.n	80039b2 <HAL_TIM_PWM_Start+0x6a>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b08      	cmp	r3, #8
 800398a:	d109      	bne.n	80039a0 <HAL_TIM_PWM_Start+0x58>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b01      	cmp	r3, #1
 8003996:	bf14      	ite	ne
 8003998:	2301      	movne	r3, #1
 800399a:	2300      	moveq	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	e008      	b.n	80039b2 <HAL_TIM_PWM_Start+0x6a>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	bf14      	ite	ne
 80039ac:	2301      	movne	r3, #1
 80039ae:	2300      	moveq	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e07c      	b.n	8003ab4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d104      	bne.n	80039ca <HAL_TIM_PWM_Start+0x82>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039c8:	e013      	b.n	80039f2 <HAL_TIM_PWM_Start+0xaa>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d104      	bne.n	80039da <HAL_TIM_PWM_Start+0x92>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039d8:	e00b      	b.n	80039f2 <HAL_TIM_PWM_Start+0xaa>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d104      	bne.n	80039ea <HAL_TIM_PWM_Start+0xa2>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039e8:	e003      	b.n	80039f2 <HAL_TIM_PWM_Start+0xaa>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2202      	movs	r2, #2
 80039ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2201      	movs	r2, #1
 80039f8:	6839      	ldr	r1, [r7, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f001 f824 	bl	8004a48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a2d      	ldr	r2, [pc, #180]	@ (8003abc <HAL_TIM_PWM_Start+0x174>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d004      	beq.n	8003a14 <HAL_TIM_PWM_Start+0xcc>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ac0 <HAL_TIM_PWM_Start+0x178>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d101      	bne.n	8003a18 <HAL_TIM_PWM_Start+0xd0>
 8003a14:	2301      	movs	r3, #1
 8003a16:	e000      	b.n	8003a1a <HAL_TIM_PWM_Start+0xd2>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d007      	beq.n	8003a2e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a22      	ldr	r2, [pc, #136]	@ (8003abc <HAL_TIM_PWM_Start+0x174>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d022      	beq.n	8003a7e <HAL_TIM_PWM_Start+0x136>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a40:	d01d      	beq.n	8003a7e <HAL_TIM_PWM_Start+0x136>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac4 <HAL_TIM_PWM_Start+0x17c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d018      	beq.n	8003a7e <HAL_TIM_PWM_Start+0x136>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac8 <HAL_TIM_PWM_Start+0x180>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d013      	beq.n	8003a7e <HAL_TIM_PWM_Start+0x136>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8003acc <HAL_TIM_PWM_Start+0x184>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00e      	beq.n	8003a7e <HAL_TIM_PWM_Start+0x136>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a16      	ldr	r2, [pc, #88]	@ (8003ac0 <HAL_TIM_PWM_Start+0x178>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d009      	beq.n	8003a7e <HAL_TIM_PWM_Start+0x136>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a18      	ldr	r2, [pc, #96]	@ (8003ad0 <HAL_TIM_PWM_Start+0x188>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d004      	beq.n	8003a7e <HAL_TIM_PWM_Start+0x136>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a16      	ldr	r2, [pc, #88]	@ (8003ad4 <HAL_TIM_PWM_Start+0x18c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d111      	bne.n	8003aa2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2b06      	cmp	r3, #6
 8003a8e:	d010      	beq.n	8003ab2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa0:	e007      	b.n	8003ab2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0201 	orr.w	r2, r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40010000 	.word	0x40010000
 8003ac0:	40010400 	.word	0x40010400
 8003ac4:	40000400 	.word	0x40000400
 8003ac8:	40000800 	.word	0x40000800
 8003acc:	40000c00 	.word	0x40000c00
 8003ad0:	40014000 	.word	0x40014000
 8003ad4:	40001800 	.word	0x40001800

08003ad8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e041      	b.n	8003b6e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fd ff78 	bl	80019f4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3304      	adds	r3, #4
 8003b14:	4619      	mov	r1, r3
 8003b16:	4610      	mov	r0, r2
 8003b18:	f000 fc10 	bl	800433c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d104      	bne.n	8003b96 <HAL_TIM_IC_Start_IT+0x1e>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	e013      	b.n	8003bbe <HAL_TIM_IC_Start_IT+0x46>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d104      	bne.n	8003ba6 <HAL_TIM_IC_Start_IT+0x2e>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	e00b      	b.n	8003bbe <HAL_TIM_IC_Start_IT+0x46>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d104      	bne.n	8003bb6 <HAL_TIM_IC_Start_IT+0x3e>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	e003      	b.n	8003bbe <HAL_TIM_IC_Start_IT+0x46>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d104      	bne.n	8003bd0 <HAL_TIM_IC_Start_IT+0x58>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	e013      	b.n	8003bf8 <HAL_TIM_IC_Start_IT+0x80>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d104      	bne.n	8003be0 <HAL_TIM_IC_Start_IT+0x68>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	e00b      	b.n	8003bf8 <HAL_TIM_IC_Start_IT+0x80>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d104      	bne.n	8003bf0 <HAL_TIM_IC_Start_IT+0x78>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	e003      	b.n	8003bf8 <HAL_TIM_IC_Start_IT+0x80>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bfa:	7bbb      	ldrb	r3, [r7, #14]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d102      	bne.n	8003c06 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c00:	7b7b      	ldrb	r3, [r7, #13]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d001      	beq.n	8003c0a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e0cc      	b.n	8003da4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d104      	bne.n	8003c1a <HAL_TIM_IC_Start_IT+0xa2>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c18:	e013      	b.n	8003c42 <HAL_TIM_IC_Start_IT+0xca>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d104      	bne.n	8003c2a <HAL_TIM_IC_Start_IT+0xb2>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c28:	e00b      	b.n	8003c42 <HAL_TIM_IC_Start_IT+0xca>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d104      	bne.n	8003c3a <HAL_TIM_IC_Start_IT+0xc2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c38:	e003      	b.n	8003c42 <HAL_TIM_IC_Start_IT+0xca>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d104      	bne.n	8003c52 <HAL_TIM_IC_Start_IT+0xda>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c50:	e013      	b.n	8003c7a <HAL_TIM_IC_Start_IT+0x102>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d104      	bne.n	8003c62 <HAL_TIM_IC_Start_IT+0xea>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c60:	e00b      	b.n	8003c7a <HAL_TIM_IC_Start_IT+0x102>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_IC_Start_IT+0xfa>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c70:	e003      	b.n	8003c7a <HAL_TIM_IC_Start_IT+0x102>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2202      	movs	r2, #2
 8003c76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b0c      	cmp	r3, #12
 8003c7e:	d841      	bhi.n	8003d04 <HAL_TIM_IC_Start_IT+0x18c>
 8003c80:	a201      	add	r2, pc, #4	@ (adr r2, 8003c88 <HAL_TIM_IC_Start_IT+0x110>)
 8003c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c86:	bf00      	nop
 8003c88:	08003cbd 	.word	0x08003cbd
 8003c8c:	08003d05 	.word	0x08003d05
 8003c90:	08003d05 	.word	0x08003d05
 8003c94:	08003d05 	.word	0x08003d05
 8003c98:	08003ccf 	.word	0x08003ccf
 8003c9c:	08003d05 	.word	0x08003d05
 8003ca0:	08003d05 	.word	0x08003d05
 8003ca4:	08003d05 	.word	0x08003d05
 8003ca8:	08003ce1 	.word	0x08003ce1
 8003cac:	08003d05 	.word	0x08003d05
 8003cb0:	08003d05 	.word	0x08003d05
 8003cb4:	08003d05 	.word	0x08003d05
 8003cb8:	08003cf3 	.word	0x08003cf3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0202 	orr.w	r2, r2, #2
 8003cca:	60da      	str	r2, [r3, #12]
      break;
 8003ccc:	e01d      	b.n	8003d0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0204 	orr.w	r2, r2, #4
 8003cdc:	60da      	str	r2, [r3, #12]
      break;
 8003cde:	e014      	b.n	8003d0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0208 	orr.w	r2, r2, #8
 8003cee:	60da      	str	r2, [r3, #12]
      break;
 8003cf0:	e00b      	b.n	8003d0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0210 	orr.w	r2, r2, #16
 8003d00:	60da      	str	r2, [r3, #12]
      break;
 8003d02:	e002      	b.n	8003d0a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
      break;
 8003d08:	bf00      	nop
  }

  if (status == HAL_OK)
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d148      	bne.n	8003da2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2201      	movs	r2, #1
 8003d16:	6839      	ldr	r1, [r7, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 fe95 	bl	8004a48 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a22      	ldr	r2, [pc, #136]	@ (8003dac <HAL_TIM_IC_Start_IT+0x234>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d022      	beq.n	8003d6e <HAL_TIM_IC_Start_IT+0x1f6>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d30:	d01d      	beq.n	8003d6e <HAL_TIM_IC_Start_IT+0x1f6>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a1e      	ldr	r2, [pc, #120]	@ (8003db0 <HAL_TIM_IC_Start_IT+0x238>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d018      	beq.n	8003d6e <HAL_TIM_IC_Start_IT+0x1f6>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a1c      	ldr	r2, [pc, #112]	@ (8003db4 <HAL_TIM_IC_Start_IT+0x23c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d013      	beq.n	8003d6e <HAL_TIM_IC_Start_IT+0x1f6>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8003db8 <HAL_TIM_IC_Start_IT+0x240>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00e      	beq.n	8003d6e <HAL_TIM_IC_Start_IT+0x1f6>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a19      	ldr	r2, [pc, #100]	@ (8003dbc <HAL_TIM_IC_Start_IT+0x244>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d009      	beq.n	8003d6e <HAL_TIM_IC_Start_IT+0x1f6>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a18      	ldr	r2, [pc, #96]	@ (8003dc0 <HAL_TIM_IC_Start_IT+0x248>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d004      	beq.n	8003d6e <HAL_TIM_IC_Start_IT+0x1f6>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a16      	ldr	r2, [pc, #88]	@ (8003dc4 <HAL_TIM_IC_Start_IT+0x24c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d111      	bne.n	8003d92 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2b06      	cmp	r3, #6
 8003d7e:	d010      	beq.n	8003da2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0201 	orr.w	r2, r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d90:	e007      	b.n	8003da2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0201 	orr.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40010000 	.word	0x40010000
 8003db0:	40000400 	.word	0x40000400
 8003db4:	40000800 	.word	0x40000800
 8003db8:	40000c00 	.word	0x40000c00
 8003dbc:	40010400 	.word	0x40010400
 8003dc0:	40014000 	.word	0x40014000
 8003dc4:	40001800 	.word	0x40001800

08003dc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d020      	beq.n	8003e2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01b      	beq.n	8003e2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f06f 0202 	mvn.w	r2, #2
 8003dfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fd f850 	bl	8000eb8 <HAL_TIM_IC_CaptureCallback>
 8003e18:	e005      	b.n	8003e26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 fa70 	bl	8004300 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 fa77 	bl	8004314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d020      	beq.n	8003e78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01b      	beq.n	8003e78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f06f 0204 	mvn.w	r2, #4
 8003e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fd f82a 	bl	8000eb8 <HAL_TIM_IC_CaptureCallback>
 8003e64:	e005      	b.n	8003e72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fa4a 	bl	8004300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fa51 	bl	8004314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d020      	beq.n	8003ec4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01b      	beq.n	8003ec4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0208 	mvn.w	r2, #8
 8003e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2204      	movs	r2, #4
 8003e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fd f804 	bl	8000eb8 <HAL_TIM_IC_CaptureCallback>
 8003eb0:	e005      	b.n	8003ebe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fa24 	bl	8004300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 fa2b 	bl	8004314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f003 0310 	and.w	r3, r3, #16
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d020      	beq.n	8003f10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f003 0310 	and.w	r3, r3, #16
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01b      	beq.n	8003f10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f06f 0210 	mvn.w	r2, #16
 8003ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2208      	movs	r2, #8
 8003ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fc ffde 	bl	8000eb8 <HAL_TIM_IC_CaptureCallback>
 8003efc:	e005      	b.n	8003f0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f9fe 	bl	8004300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fa05 	bl	8004314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00c      	beq.n	8003f34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d007      	beq.n	8003f34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f06f 0201 	mvn.w	r2, #1
 8003f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f9dc 	bl	80042ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00c      	beq.n	8003f58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d007      	beq.n	8003f58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fe24 	bl	8004ba0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00c      	beq.n	8003f7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d007      	beq.n	8003f7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f9d6 	bl	8004328 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00c      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d007      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0220 	mvn.w	r2, #32
 8003f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fdf6 	bl	8004b8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fa0:	bf00      	nop
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e088      	b.n	80040d8 <HAL_TIM_IC_ConfigChannel+0x130>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d11b      	bne.n	800400c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003fe4:	f000 fc06 	bl	80047f4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699a      	ldr	r2, [r3, #24]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 020c 	bic.w	r2, r2, #12
 8003ff6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6999      	ldr	r1, [r3, #24]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	619a      	str	r2, [r3, #24]
 800400a:	e060      	b.n	80040ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b04      	cmp	r3, #4
 8004010:	d11c      	bne.n	800404c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004022:	f000 fc5b 	bl	80048dc <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699a      	ldr	r2, [r3, #24]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004034:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6999      	ldr	r1, [r3, #24]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	021a      	lsls	r2, r3, #8
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	619a      	str	r2, [r3, #24]
 800404a:	e040      	b.n	80040ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b08      	cmp	r3, #8
 8004050:	d11b      	bne.n	800408a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004062:	f000 fc78 	bl	8004956 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 020c 	bic.w	r2, r2, #12
 8004074:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69d9      	ldr	r1, [r3, #28]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	61da      	str	r2, [r3, #28]
 8004088:	e021      	b.n	80040ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b0c      	cmp	r3, #12
 800408e:	d11c      	bne.n	80040ca <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80040a0:	f000 fc95 	bl	80049ce <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69da      	ldr	r2, [r3, #28]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80040b2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	69d9      	ldr	r1, [r3, #28]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	021a      	lsls	r2, r3, #8
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	61da      	str	r2, [r3, #28]
 80040c8:	e001      	b.n	80040ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e0ae      	b.n	800425c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b0c      	cmp	r3, #12
 800410a:	f200 809f 	bhi.w	800424c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800410e:	a201      	add	r2, pc, #4	@ (adr r2, 8004114 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004114:	08004149 	.word	0x08004149
 8004118:	0800424d 	.word	0x0800424d
 800411c:	0800424d 	.word	0x0800424d
 8004120:	0800424d 	.word	0x0800424d
 8004124:	08004189 	.word	0x08004189
 8004128:	0800424d 	.word	0x0800424d
 800412c:	0800424d 	.word	0x0800424d
 8004130:	0800424d 	.word	0x0800424d
 8004134:	080041cb 	.word	0x080041cb
 8004138:	0800424d 	.word	0x0800424d
 800413c:	0800424d 	.word	0x0800424d
 8004140:	0800424d 	.word	0x0800424d
 8004144:	0800420b 	.word	0x0800420b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68b9      	ldr	r1, [r7, #8]
 800414e:	4618      	mov	r0, r3
 8004150:	f000 f9a0 	bl	8004494 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699a      	ldr	r2, [r3, #24]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0208 	orr.w	r2, r2, #8
 8004162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0204 	bic.w	r2, r2, #4
 8004172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6999      	ldr	r1, [r3, #24]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	691a      	ldr	r2, [r3, #16]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	619a      	str	r2, [r3, #24]
      break;
 8004186:	e064      	b.n	8004252 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68b9      	ldr	r1, [r7, #8]
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f9f0 	bl	8004574 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6999      	ldr	r1, [r3, #24]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	021a      	lsls	r2, r3, #8
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	619a      	str	r2, [r3, #24]
      break;
 80041c8:	e043      	b.n	8004252 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68b9      	ldr	r1, [r7, #8]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fa45 	bl	8004660 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69da      	ldr	r2, [r3, #28]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f042 0208 	orr.w	r2, r2, #8
 80041e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69da      	ldr	r2, [r3, #28]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0204 	bic.w	r2, r2, #4
 80041f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69d9      	ldr	r1, [r3, #28]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	61da      	str	r2, [r3, #28]
      break;
 8004208:	e023      	b.n	8004252 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68b9      	ldr	r1, [r7, #8]
 8004210:	4618      	mov	r0, r3
 8004212:	f000 fa99 	bl	8004748 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69da      	ldr	r2, [r3, #28]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69d9      	ldr	r1, [r3, #28]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	021a      	lsls	r2, r3, #8
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	61da      	str	r2, [r3, #28]
      break;
 800424a:	e002      	b.n	8004252 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	75fb      	strb	r3, [r7, #23]
      break;
 8004250:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800425a:	7dfb      	ldrb	r3, [r7, #23]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b0c      	cmp	r3, #12
 8004276:	d831      	bhi.n	80042dc <HAL_TIM_ReadCapturedValue+0x78>
 8004278:	a201      	add	r2, pc, #4	@ (adr r2, 8004280 <HAL_TIM_ReadCapturedValue+0x1c>)
 800427a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427e:	bf00      	nop
 8004280:	080042b5 	.word	0x080042b5
 8004284:	080042dd 	.word	0x080042dd
 8004288:	080042dd 	.word	0x080042dd
 800428c:	080042dd 	.word	0x080042dd
 8004290:	080042bf 	.word	0x080042bf
 8004294:	080042dd 	.word	0x080042dd
 8004298:	080042dd 	.word	0x080042dd
 800429c:	080042dd 	.word	0x080042dd
 80042a0:	080042c9 	.word	0x080042c9
 80042a4:	080042dd 	.word	0x080042dd
 80042a8:	080042dd 	.word	0x080042dd
 80042ac:	080042dd 	.word	0x080042dd
 80042b0:	080042d3 	.word	0x080042d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ba:	60fb      	str	r3, [r7, #12]

      break;
 80042bc:	e00f      	b.n	80042de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c4:	60fb      	str	r3, [r7, #12]

      break;
 80042c6:	e00a      	b.n	80042de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ce:	60fb      	str	r3, [r7, #12]

      break;
 80042d0:	e005      	b.n	80042de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d8:	60fb      	str	r3, [r7, #12]

      break;
 80042da:	e000      	b.n	80042de <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80042dc:	bf00      	nop
  }

  return tmpreg;
 80042de:	68fb      	ldr	r3, [r7, #12]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a46      	ldr	r2, [pc, #280]	@ (8004468 <TIM_Base_SetConfig+0x12c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d013      	beq.n	800437c <TIM_Base_SetConfig+0x40>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800435a:	d00f      	beq.n	800437c <TIM_Base_SetConfig+0x40>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a43      	ldr	r2, [pc, #268]	@ (800446c <TIM_Base_SetConfig+0x130>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d00b      	beq.n	800437c <TIM_Base_SetConfig+0x40>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a42      	ldr	r2, [pc, #264]	@ (8004470 <TIM_Base_SetConfig+0x134>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d007      	beq.n	800437c <TIM_Base_SetConfig+0x40>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a41      	ldr	r2, [pc, #260]	@ (8004474 <TIM_Base_SetConfig+0x138>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d003      	beq.n	800437c <TIM_Base_SetConfig+0x40>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a40      	ldr	r2, [pc, #256]	@ (8004478 <TIM_Base_SetConfig+0x13c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d108      	bne.n	800438e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a35      	ldr	r2, [pc, #212]	@ (8004468 <TIM_Base_SetConfig+0x12c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d02b      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800439c:	d027      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a32      	ldr	r2, [pc, #200]	@ (800446c <TIM_Base_SetConfig+0x130>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d023      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a31      	ldr	r2, [pc, #196]	@ (8004470 <TIM_Base_SetConfig+0x134>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d01f      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a30      	ldr	r2, [pc, #192]	@ (8004474 <TIM_Base_SetConfig+0x138>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d01b      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a2f      	ldr	r2, [pc, #188]	@ (8004478 <TIM_Base_SetConfig+0x13c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d017      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a2e      	ldr	r2, [pc, #184]	@ (800447c <TIM_Base_SetConfig+0x140>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d013      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004480 <TIM_Base_SetConfig+0x144>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00f      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004484 <TIM_Base_SetConfig+0x148>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00b      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a2b      	ldr	r2, [pc, #172]	@ (8004488 <TIM_Base_SetConfig+0x14c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d007      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a2a      	ldr	r2, [pc, #168]	@ (800448c <TIM_Base_SetConfig+0x150>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d003      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a29      	ldr	r2, [pc, #164]	@ (8004490 <TIM_Base_SetConfig+0x154>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d108      	bne.n	8004400 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a10      	ldr	r2, [pc, #64]	@ (8004468 <TIM_Base_SetConfig+0x12c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d003      	beq.n	8004434 <TIM_Base_SetConfig+0xf8>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a12      	ldr	r2, [pc, #72]	@ (8004478 <TIM_Base_SetConfig+0x13c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d103      	bne.n	800443c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b01      	cmp	r3, #1
 800444c:	d105      	bne.n	800445a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f023 0201 	bic.w	r2, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	611a      	str	r2, [r3, #16]
  }
}
 800445a:	bf00      	nop
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40010000 	.word	0x40010000
 800446c:	40000400 	.word	0x40000400
 8004470:	40000800 	.word	0x40000800
 8004474:	40000c00 	.word	0x40000c00
 8004478:	40010400 	.word	0x40010400
 800447c:	40014000 	.word	0x40014000
 8004480:	40014400 	.word	0x40014400
 8004484:	40014800 	.word	0x40014800
 8004488:	40001800 	.word	0x40001800
 800448c:	40001c00 	.word	0x40001c00
 8004490:	40002000 	.word	0x40002000

08004494 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	f023 0201 	bic.w	r2, r3, #1
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0303 	bic.w	r3, r3, #3
 80044ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f023 0302 	bic.w	r3, r3, #2
 80044dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a20      	ldr	r2, [pc, #128]	@ (800456c <TIM_OC1_SetConfig+0xd8>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d003      	beq.n	80044f8 <TIM_OC1_SetConfig+0x64>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a1f      	ldr	r2, [pc, #124]	@ (8004570 <TIM_OC1_SetConfig+0xdc>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d10c      	bne.n	8004512 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f023 0308 	bic.w	r3, r3, #8
 80044fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f023 0304 	bic.w	r3, r3, #4
 8004510:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a15      	ldr	r2, [pc, #84]	@ (800456c <TIM_OC1_SetConfig+0xd8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d003      	beq.n	8004522 <TIM_OC1_SetConfig+0x8e>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a14      	ldr	r2, [pc, #80]	@ (8004570 <TIM_OC1_SetConfig+0xdc>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d111      	bne.n	8004546 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4313      	orrs	r3, r2
 8004544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	621a      	str	r2, [r3, #32]
}
 8004560:	bf00      	nop
 8004562:	371c      	adds	r7, #28
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	40010000 	.word	0x40010000
 8004570:	40010400 	.word	0x40010400

08004574 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	f023 0210 	bic.w	r2, r3, #16
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	021b      	lsls	r3, r3, #8
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f023 0320 	bic.w	r3, r3, #32
 80045be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a22      	ldr	r2, [pc, #136]	@ (8004658 <TIM_OC2_SetConfig+0xe4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d003      	beq.n	80045dc <TIM_OC2_SetConfig+0x68>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a21      	ldr	r2, [pc, #132]	@ (800465c <TIM_OC2_SetConfig+0xe8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d10d      	bne.n	80045f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a17      	ldr	r2, [pc, #92]	@ (8004658 <TIM_OC2_SetConfig+0xe4>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d003      	beq.n	8004608 <TIM_OC2_SetConfig+0x94>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a16      	ldr	r2, [pc, #88]	@ (800465c <TIM_OC2_SetConfig+0xe8>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d113      	bne.n	8004630 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800460e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004616:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	621a      	str	r2, [r3, #32]
}
 800464a:	bf00      	nop
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40010000 	.word	0x40010000
 800465c:	40010400 	.word	0x40010400

08004660 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800468e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 0303 	bic.w	r3, r3, #3
 8004696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	021b      	lsls	r3, r3, #8
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a21      	ldr	r2, [pc, #132]	@ (8004740 <TIM_OC3_SetConfig+0xe0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d003      	beq.n	80046c6 <TIM_OC3_SetConfig+0x66>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a20      	ldr	r2, [pc, #128]	@ (8004744 <TIM_OC3_SetConfig+0xe4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d10d      	bne.n	80046e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	021b      	lsls	r3, r3, #8
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a16      	ldr	r2, [pc, #88]	@ (8004740 <TIM_OC3_SetConfig+0xe0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d003      	beq.n	80046f2 <TIM_OC3_SetConfig+0x92>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a15      	ldr	r2, [pc, #84]	@ (8004744 <TIM_OC3_SetConfig+0xe4>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d113      	bne.n	800471a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004700:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	4313      	orrs	r3, r2
 800470c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4313      	orrs	r3, r2
 8004718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	621a      	str	r2, [r3, #32]
}
 8004734:	bf00      	nop
 8004736:	371c      	adds	r7, #28
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	40010000 	.word	0x40010000
 8004744:	40010400 	.word	0x40010400

08004748 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800477e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	021b      	lsls	r3, r3, #8
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4313      	orrs	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	031b      	lsls	r3, r3, #12
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a12      	ldr	r2, [pc, #72]	@ (80047ec <TIM_OC4_SetConfig+0xa4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d003      	beq.n	80047b0 <TIM_OC4_SetConfig+0x68>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a11      	ldr	r2, [pc, #68]	@ (80047f0 <TIM_OC4_SetConfig+0xa8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d109      	bne.n	80047c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	019b      	lsls	r3, r3, #6
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	621a      	str	r2, [r3, #32]
}
 80047de:	bf00      	nop
 80047e0:	371c      	adds	r7, #28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	40010000 	.word	0x40010000
 80047f0:	40010400 	.word	0x40010400

080047f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
 8004800:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	f023 0201 	bic.w	r2, r3, #1
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4a28      	ldr	r2, [pc, #160]	@ (80048c0 <TIM_TI1_SetConfig+0xcc>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d01b      	beq.n	800485a <TIM_TI1_SetConfig+0x66>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004828:	d017      	beq.n	800485a <TIM_TI1_SetConfig+0x66>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4a25      	ldr	r2, [pc, #148]	@ (80048c4 <TIM_TI1_SetConfig+0xd0>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d013      	beq.n	800485a <TIM_TI1_SetConfig+0x66>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4a24      	ldr	r2, [pc, #144]	@ (80048c8 <TIM_TI1_SetConfig+0xd4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d00f      	beq.n	800485a <TIM_TI1_SetConfig+0x66>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4a23      	ldr	r2, [pc, #140]	@ (80048cc <TIM_TI1_SetConfig+0xd8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00b      	beq.n	800485a <TIM_TI1_SetConfig+0x66>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4a22      	ldr	r2, [pc, #136]	@ (80048d0 <TIM_TI1_SetConfig+0xdc>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d007      	beq.n	800485a <TIM_TI1_SetConfig+0x66>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4a21      	ldr	r2, [pc, #132]	@ (80048d4 <TIM_TI1_SetConfig+0xe0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d003      	beq.n	800485a <TIM_TI1_SetConfig+0x66>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4a20      	ldr	r2, [pc, #128]	@ (80048d8 <TIM_TI1_SetConfig+0xe4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d101      	bne.n	800485e <TIM_TI1_SetConfig+0x6a>
 800485a:	2301      	movs	r3, #1
 800485c:	e000      	b.n	8004860 <TIM_TI1_SetConfig+0x6c>
 800485e:	2300      	movs	r3, #0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d008      	beq.n	8004876 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f023 0303 	bic.w	r3, r3, #3
 800486a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	e003      	b.n	800487e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f043 0301 	orr.w	r3, r3, #1
 800487c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004884:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	b2db      	uxtb	r3, r3
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f023 030a 	bic.w	r3, r3, #10
 8004898:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f003 030a 	and.w	r3, r3, #10
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	621a      	str	r2, [r3, #32]
}
 80048b2:	bf00      	nop
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40010000 	.word	0x40010000
 80048c4:	40000400 	.word	0x40000400
 80048c8:	40000800 	.word	0x40000800
 80048cc:	40000c00 	.word	0x40000c00
 80048d0:	40010400 	.word	0x40010400
 80048d4:	40014000 	.word	0x40014000
 80048d8:	40001800 	.word	0x40001800

080048dc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	f023 0210 	bic.w	r2, r3, #16
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004908:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	021b      	lsls	r3, r3, #8
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800491a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	031b      	lsls	r3, r3, #12
 8004920:	b29b      	uxth	r3, r3
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800492e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	4313      	orrs	r3, r2
 800493c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	621a      	str	r2, [r3, #32]
}
 800494a:	bf00      	nop
 800494c:	371c      	adds	r7, #28
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004956:	b480      	push	{r7}
 8004958:	b087      	sub	sp, #28
 800495a:	af00      	add	r7, sp, #0
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	607a      	str	r2, [r7, #4]
 8004962:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f023 0303 	bic.w	r3, r3, #3
 8004982:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004992:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	b2db      	uxtb	r3, r3
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80049a6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	021b      	lsls	r3, r3, #8
 80049ac:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	621a      	str	r2, [r3, #32]
}
 80049c2:	bf00      	nop
 80049c4:	371c      	adds	r7, #28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b087      	sub	sp, #28
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	607a      	str	r2, [r7, #4]
 80049da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049fa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	021b      	lsls	r3, r3, #8
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a0c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	031b      	lsls	r3, r3, #12
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004a20:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	031b      	lsls	r3, r3, #12
 8004a26:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	621a      	str	r2, [r3, #32]
}
 8004a3c:	bf00      	nop
 8004a3e:	371c      	adds	r7, #28
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a1a      	ldr	r2, [r3, #32]
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	401a      	ands	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a1a      	ldr	r2, [r3, #32]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f003 031f 	and.w	r3, r3, #31
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a80:	431a      	orrs	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	621a      	str	r2, [r3, #32]
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
	...

08004a94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e05a      	b.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a21      	ldr	r2, [pc, #132]	@ (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d022      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004af8:	d01d      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a1d      	ldr	r2, [pc, #116]	@ (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d018      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a1b      	ldr	r2, [pc, #108]	@ (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d013      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a1a      	ldr	r2, [pc, #104]	@ (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00e      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a18      	ldr	r2, [pc, #96]	@ (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d009      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a17      	ldr	r2, [pc, #92]	@ (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d004      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a15      	ldr	r2, [pc, #84]	@ (8004b88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d10c      	bne.n	8004b50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40010000 	.word	0x40010000
 8004b74:	40000400 	.word	0x40000400
 8004b78:	40000800 	.word	0x40000800
 8004b7c:	40000c00 	.word	0x40000c00
 8004b80:	40010400 	.word	0x40010400
 8004b84:	40014000 	.word	0x40014000
 8004b88:	40001800 	.word	0x40001800

08004b8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <memset>:
 8004bb4:	4402      	add	r2, r0
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d100      	bne.n	8004bbe <memset+0xa>
 8004bbc:	4770      	bx	lr
 8004bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004bc2:	e7f9      	b.n	8004bb8 <memset+0x4>

08004bc4 <__libc_init_array>:
 8004bc4:	b570      	push	{r4, r5, r6, lr}
 8004bc6:	4d0d      	ldr	r5, [pc, #52]	@ (8004bfc <__libc_init_array+0x38>)
 8004bc8:	4c0d      	ldr	r4, [pc, #52]	@ (8004c00 <__libc_init_array+0x3c>)
 8004bca:	1b64      	subs	r4, r4, r5
 8004bcc:	10a4      	asrs	r4, r4, #2
 8004bce:	2600      	movs	r6, #0
 8004bd0:	42a6      	cmp	r6, r4
 8004bd2:	d109      	bne.n	8004be8 <__libc_init_array+0x24>
 8004bd4:	4d0b      	ldr	r5, [pc, #44]	@ (8004c04 <__libc_init_array+0x40>)
 8004bd6:	4c0c      	ldr	r4, [pc, #48]	@ (8004c08 <__libc_init_array+0x44>)
 8004bd8:	f000 f818 	bl	8004c0c <_init>
 8004bdc:	1b64      	subs	r4, r4, r5
 8004bde:	10a4      	asrs	r4, r4, #2
 8004be0:	2600      	movs	r6, #0
 8004be2:	42a6      	cmp	r6, r4
 8004be4:	d105      	bne.n	8004bf2 <__libc_init_array+0x2e>
 8004be6:	bd70      	pop	{r4, r5, r6, pc}
 8004be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bec:	4798      	blx	r3
 8004bee:	3601      	adds	r6, #1
 8004bf0:	e7ee      	b.n	8004bd0 <__libc_init_array+0xc>
 8004bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bf6:	4798      	blx	r3
 8004bf8:	3601      	adds	r6, #1
 8004bfa:	e7f2      	b.n	8004be2 <__libc_init_array+0x1e>
 8004bfc:	08005844 	.word	0x08005844
 8004c00:	08005844 	.word	0x08005844
 8004c04:	08005844 	.word	0x08005844
 8004c08:	08005848 	.word	0x08005848

08004c0c <_init>:
 8004c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0e:	bf00      	nop
 8004c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c12:	bc08      	pop	{r3}
 8004c14:	469e      	mov	lr, r3
 8004c16:	4770      	bx	lr

08004c18 <_fini>:
 8004c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1a:	bf00      	nop
 8004c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1e:	bc08      	pop	{r3}
 8004c20:	469e      	mov	lr, r3
 8004c22:	4770      	bx	lr
